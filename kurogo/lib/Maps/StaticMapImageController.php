<?php

/*
 * Copyright Â© 2010 - 2013 Modo Labs Inc. All rights reserved.
 *
 * The license governing the contents of this file is located in the LICENSE
 * file located at the root directory of this distribution. If the LICENSE file
 * is missing, please contact sales@modolabs.com.
 *
 */

abstract class StaticMapImageController extends MapImageController
{
    protected $imageFormat = 'png';
    protected $supportedImageFormats = array('png', 'jpg');

    // final function that generates url for the img src argument
    abstract public function getImageURL();

    // back out individual parameters from the query portion of an image URL generated by this class
    abstract public function parseQuery($query);

    public function getJavascriptControlOptions() {
    }

    public function getLongitudeRange() {
        // at zoom level 0 the whole earth is shown, i.e. 360 degrees
        return 360 / pow(2, $this->zoomLevel);
    }

    public function getLatitudeRange() {
        // this should be 180 at zoom level 0, though may vary with latitude
        return 180 / pow(2, $this->zoomLevel);
    }

    // n, s, e, w, ne, nw, se, sw
    public function getCenterForPanning($direction) {
        $vertical = null;
        $horizontal = null;

        if (preg_match('/[ns]/', $direction, $matches)) {
            $vertical = $matches[0];
        }
        if (preg_match('/[ew]/', $direction, $matches)) {
            $horizontal = $matches[0];
        }

        $center = $this->center;
        if ($horizontal == 'e') {
            $center['lon'] += $this->getLongitudeRange() / 2;
        } else if ($horizontal == 'w') {
            $center['lon'] -= $this->getLongitudeRange() / 2;
        }

        if ($vertical == 'n') {
            $center['lat'] += $this->getLatitudeRange() / 2;
        } else if ($vertical == 's') {
            $center['lat'] -= $this->getLatitudeRange() / 2;
        }
        return $center;
    }

    public function getLevelForZooming($direction) {
        $zoomLevel = $this->zoomLevel;
        if ($direction == 'in') {
            if ($zoomLevel < $this->maxZoomLevel)
                $zoomLevel += 1;
        } else if ($direction == 'out') {
            if ($zoomLevel > $this->minZoomLevel)
                $zoomLevel -= 1;
        }
        return $zoomLevel;
    }

    public function setBoundingBox($xmin, $ymin, $xmax, $ymax) {
        if ($xmax - $xmin > 0 && $ymax - $ymin > 0) {
            $this->bbox = array(
                'xmin' => $xmin, 'ymin' => $ymin,
                'xmax' => $xmax, 'ymax' => $ymax,
                );
            $this->center = array(
                'lat' => ($ymin + $ymax) / 2,
                'lon' => ($xmin + $xmax) / 2,
                );
            $this->zoomLevel = log(360 / ($xmax - $xmin), 2);
        } else {
            Kurogo::log(LOG_WARNING, "invalid bounding box {xmin=$xmin, ymin=$ymin, xmax=$xmax, ymax=$ymax}", "maps");
        }
    }

    public function getBoundingBox() {
        if (!$this->bbox || ($this->bbox['xmax'] <= $this->bbox['xmin'])
            || $this->bbox['ymax'] < $this->bbox['ymin'])
        {
            $xrange = $this->getLongitudeRange();
            $yrange = $this->getLatitudeRange();
            $this->bbox = array(
                'xmin' => $this->center['lon'] - $xrange / 2,
                'xmax' => $this->center['lon'] + $xrange / 2,
                'ymin' => $this->center['lat'] - $xrange / 2,
                'ymax' => $this->center['lat'] + $xrange / 2,
                );
        }
        return $this->bbox;
    }

    public function setImageFormat($format) {
        if (in_array($format, $this->supportedImageFormats)) {
            $this->imageFormat = $format;
        }
    }
}


