
/* infobox-1.1.11.js */

/* 1   */ /**
/* 2   *|  * @name InfoBox
/* 3   *|  * @version 1.1.11 [January 9, 2012]
/* 4   *|  * @author Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)
/* 5   *|  * @copyright Copyright 2010 Gary Little [gary at luxcentral.com]
/* 6   *|  * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.
/* 7   *|  *  <p>
/* 8   *|  *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several
/* 9   *|  *  additional properties for advanced styling. An InfoBox can also be used as a map label.
/* 10  *|  *  <p>
/* 11  *|  *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.
/* 12  *|  */
/* 13  */ 
/* 14  */ /*!
/* 15  *|  *
/* 16  *|  * Licensed under the Apache License, Version 2.0 (the "License");
/* 17  *|  * you may not use this file except in compliance with the License.
/* 18  *|  * You may obtain a copy of the License at
/* 19  *|  *
/* 20  *|  *       http://www.apache.org/licenses/LICENSE-2.0
/* 21  *|  *
/* 22  *|  * Unless required by applicable law or agreed to in writing, software
/* 23  *|  * distributed under the License is distributed on an "AS IS" BASIS,
/* 24  *|  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/* 25  *|  * See the License for the specific language governing permissions and
/* 26  *|  * limitations under the License.
/* 27  *|  */
/* 28  */ 
/* 29  */ /*jslint browser:true */
/* 30  */ /*global google */
/* 31  */ 
/* 32  */ /**
/* 33  *|  * @name InfoBoxOptions
/* 34  *|  * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.
/* 35  *|  * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).
/* 36  *|  * @property {boolean} disableAutoPan Disable auto-pan on <tt>open</tt> (default is <tt>false</tt>).
/* 37  *|  * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.
/* 38  *|  * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox
/* 39  *|  *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)
/* 40  *|  *  to the map pixel corresponding to <tt>position</tt>.
/* 41  *|  * @property {LatLng} position The geographic location at which to display the InfoBox.
/* 42  *|  * @property {number} zIndex The CSS z-index style value for the InfoBox.
/* 43  *|  *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.
/* 44  *|  * @property {string} boxClass The name of the CSS class defining the styles for the InfoBox container.
/* 45  *|  *  The default name is <code>infoBox</code>.
/* 46  *|  * @property {Object} [boxStyle] An object literal whose properties define specific CSS
/* 47  *|  *  style values to be applied to the InfoBox. Style values defined here override those that may
/* 48  *|  *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the
/* 49  *|  *  InfoBox has been created, all previously set styles (except those defined in the style sheet)
/* 50  *|  *  are removed from the InfoBox before the new style values are applied.

/* infobox-1.1.11.js */

/* 51  *|  * @property {string} closeBoxMargin The CSS margin style value for the close box.
/* 52  *|  *  The default is "2px" (a 2-pixel margin on all sides).
/* 53  *|  * @property {string} closeBoxURL The URL of the image representing the close box.
/* 54  *|  *  Note: The default is the URL for Google's standard close box.
/* 55  *|  *  Set this property to "" if no close box is required.
/* 56  *|  * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the
/* 57  *|  *  map edge after an auto-pan.
/* 58  *|  * @property {boolean} isHidden Hide the InfoBox on <tt>open</tt> (default is <tt>false</tt>).
/* 59  *|  * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>
/* 60  *|  *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).
/* 61  *|  * @property {string} pane The pane where the InfoBox is to appear (default is "floatPane").
/* 62  *|  *  Set the pane to "mapPane" if the InfoBox is being used as a map label.
/* 63  *|  *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.
/* 64  *|  * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,
/* 65  *|  *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox
/* 66  *|  *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set
/* 67  *|  *  this property to <tt>true</tt> if the InfoBox is being used as a map label.
/* 68  *|  */
/* 69  */ 
/* 70  */ /**
/* 71  *|  * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.
/* 72  *|  *  Call <tt>InfoBox.open</tt> to add the box to the map.
/* 73  *|  * @constructor
/* 74  *|  * @param {InfoBoxOptions} [opt_opts]
/* 75  *|  */
/* 76  */ function InfoBox(opt_opts) {
/* 77  */ 
/* 78  */   opt_opts = opt_opts || {};
/* 79  */ 
/* 80  */   google.maps.OverlayView.apply(this, arguments);
/* 81  */ 
/* 82  */   // Standard options (in common with google.maps.InfoWindow):
/* 83  */   //
/* 84  */   this.content_ = opt_opts.content || "";
/* 85  */   this.disableAutoPan_ = opt_opts.disableAutoPan || false;
/* 86  */   this.maxWidth_ = opt_opts.maxWidth || 0;
/* 87  */   this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);
/* 88  */   this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);
/* 89  */   this.zIndex_ = opt_opts.zIndex || null;
/* 90  */ 
/* 91  */   // Additional options (unique to InfoBox):
/* 92  */   //
/* 93  */   this.boxClass_ = opt_opts.boxClass || "infoBox";
/* 94  */   this.boxStyle_ = opt_opts.boxStyle || {};
/* 95  */   this.closeBoxMargin_ = opt_opts.closeBoxMargin || "2px";
/* 96  */   this.closeBoxURL_ = opt_opts.closeBoxURL || "http://www.google.com/intl/en_us/mapfiles/close.gif";
/* 97  */   if (opt_opts.closeBoxURL === "") {
/* 98  */     this.closeBoxURL_ = "";
/* 99  */   }
/* 100 */   this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);

/* infobox-1.1.11.js */

/* 101 */   this.isHidden_ = opt_opts.isHidden || false;
/* 102 */   this.alignBottom_ = opt_opts.alignBottom || false;
/* 103 */   this.pane_ = opt_opts.pane || "floatPane";
/* 104 */   this.enableEventPropagation_ = opt_opts.enableEventPropagation || false;
/* 105 */ 
/* 106 */   this.div_ = null;
/* 107 */   this.closeListener_ = null;
/* 108 */   this.moveListener_ = null;
/* 109 */   this.contextListener_ = null;
/* 110 */   this.eventListeners_ = null;
/* 111 */   this.fixedWidthSet_ = null;
/* 112 */ }
/* 113 */ 
/* 114 */ /* InfoBox extends OverlayView in the Google Maps API v3.
/* 115 *|  */
/* 116 */ InfoBox.prototype = new google.maps.OverlayView();
/* 117 */ 
/* 118 */ /**
/* 119 *|  * Creates the DIV representing the InfoBox.
/* 120 *|  * @private
/* 121 *|  */
/* 122 */ InfoBox.prototype.createInfoBoxDiv_ = function () {
/* 123 */ 
/* 124 */   var i;
/* 125 */   var events;
/* 126 */   var bw;
/* 127 */   var me = this;
/* 128 */ 
/* 129 */   // This handler prevents an event in the InfoBox from being passed on to the map.
/* 130 */   //
/* 131 */   var cancelHandler = function (e) {
/* 132 */     e.cancelBubble = true;
/* 133 */     if (e.stopPropagation) {
/* 134 */       e.stopPropagation();
/* 135 */     }
/* 136 */   };
/* 137 */ 
/* 138 */   // This handler ignores the current event in the InfoBox and conditionally prevents
/* 139 */   // the event from being passed on to the map. It is used for the contextmenu event.
/* 140 */   //
/* 141 */   var ignoreHandler = function (e) {
/* 142 */ 
/* 143 */     e.returnValue = false;
/* 144 */ 
/* 145 */     if (e.preventDefault) {
/* 146 */ 
/* 147 */       e.preventDefault();
/* 148 */     }
/* 149 */ 
/* 150 */     if (!me.enableEventPropagation_) {

/* infobox-1.1.11.js */

/* 151 */ 
/* 152 */       cancelHandler(e);
/* 153 */     }
/* 154 */   };
/* 155 */ 
/* 156 */   if (!this.div_) {
/* 157 */ 
/* 158 */     this.div_ = document.createElement("div");
/* 159 */ 
/* 160 */     this.setBoxStyle_();
/* 161 */ 
/* 162 */     if (typeof this.content_.nodeType === "undefined") {
/* 163 */       this.div_.innerHTML = this.getCloseBoxImg_() + this.content_;
/* 164 */     } else {
/* 165 */       this.div_.innerHTML = this.getCloseBoxImg_();
/* 166 */       this.div_.appendChild(this.content_);
/* 167 */     }
/* 168 */ 
/* 169 */     // Add the InfoBox DIV to the DOM
/* 170 */     this.getPanes()[this.pane_].appendChild(this.div_);
/* 171 */ 
/* 172 */     this.addClickHandler_();
/* 173 */ 
/* 174 */     if (this.div_.style.width) {
/* 175 */ 
/* 176 */       this.fixedWidthSet_ = true;
/* 177 */ 
/* 178 */     } else {
/* 179 */ 
/* 180 */       if (this.maxWidth_ !== 0 && this.div_.offsetWidth > this.maxWidth_) {
/* 181 */ 
/* 182 */         this.div_.style.width = this.maxWidth_;
/* 183 */         this.div_.style.overflow = "auto";
/* 184 */         this.fixedWidthSet_ = true;
/* 185 */ 
/* 186 */       } else { // The following code is needed to overcome problems with MSIE
/* 187 */ 
/* 188 */         bw = this.getBoxWidths_();
/* 189 */ 
/* 190 */         this.div_.style.width = (this.div_.offsetWidth - bw.left - bw.right) + "px";
/* 191 */         this.fixedWidthSet_ = false;
/* 192 */       }
/* 193 */     }
/* 194 */ 
/* 195 */     this.panBox_(this.disableAutoPan_);
/* 196 */ 
/* 197 */     if (!this.enableEventPropagation_) {
/* 198 */ 
/* 199 */       this.eventListeners_ = [];
/* 200 */ 

/* infobox-1.1.11.js */

/* 201 */       // Cancel event propagation.
/* 202 */       //
/* 203 */       // Note: mousemove not included (to resolve Issue 152)
/* 204 */       events = ["mousedown", "mouseover", "mouseout", "mouseup",
/* 205 */       "click", "dblclick", "touchstart", "touchend", "touchmove"];
/* 206 */ 
/* 207 */       for (i = 0; i < events.length; i++) {
/* 208 */ 
/* 209 */         this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));
/* 210 */       }
/* 211 */       
/* 212 */       // Workaround for Google bug that causes the cursor to change to a pointer
/* 213 */       // when the mouse moves over a marker underneath InfoBox.
/* 214 */       this.eventListeners_.push(google.maps.event.addDomListener(this.div_, "mouseover", function (e) {
/* 215 */         this.style.cursor = "default";
/* 216 */       }));
/* 217 */     }
/* 218 */ 
/* 219 */     this.contextListener_ = google.maps.event.addDomListener(this.div_, "contextmenu", ignoreHandler);
/* 220 */ 
/* 221 */     /**
/* 222 *|      * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.
/* 223 *|      * @name InfoBox#domready
/* 224 *|      * @event
/* 225 *|      */
/* 226 */     google.maps.event.trigger(this, "domready");
/* 227 */   }
/* 228 */ };
/* 229 */ 
/* 230 */ /**
/* 231 *|  * Returns the HTML <IMG> tag for the close box.
/* 232 *|  * @private
/* 233 *|  */
/* 234 */ InfoBox.prototype.getCloseBoxImg_ = function () {
/* 235 */ 
/* 236 */   var img = "";
/* 237 */ 
/* 238 */   if (this.closeBoxURL_ !== "") {
/* 239 */ 
/* 240 */     img  = "<img";
/* 241 */     img += " src='" + this.closeBoxURL_ + "'";
/* 242 */     img += " align=right"; // Do this because Opera chokes on style='float: right;'
/* 243 */     img += " style='";
/* 244 */     img += " position: relative;"; // Required by MSIE
/* 245 */     img += " cursor: pointer;";
/* 246 */     img += " margin: " + this.closeBoxMargin_ + ";";
/* 247 */     img += "'>";
/* 248 */   }
/* 249 */ 
/* 250 */   return img;

/* infobox-1.1.11.js */

/* 251 */ };
/* 252 */ 
/* 253 */ /**
/* 254 *|  * Adds the click handler to the InfoBox close box.
/* 255 *|  * @private
/* 256 *|  */
/* 257 */ InfoBox.prototype.addClickHandler_ = function () {
/* 258 */ 
/* 259 */   var closeBox;
/* 260 */ 
/* 261 */   if (this.closeBoxURL_ !== "") {
/* 262 */ 
/* 263 */     closeBox = this.div_.firstChild;
/* 264 */     this.closeListener_ = google.maps.event.addDomListener(closeBox, 'click', this.getCloseClickHandler_());
/* 265 */ 
/* 266 */   } else {
/* 267 */ 
/* 268 */     this.closeListener_ = null;
/* 269 */   }
/* 270 */ };
/* 271 */ 
/* 272 */ /**
/* 273 *|  * Returns the function to call when the user clicks the close box of an InfoBox.
/* 274 *|  * @private
/* 275 *|  */
/* 276 */ InfoBox.prototype.getCloseClickHandler_ = function () {
/* 277 */ 
/* 278 */   var me = this;
/* 279 */ 
/* 280 */   return function (e) {
/* 281 */ 
/* 282 */     // 1.0.3 fix: Always prevent propagation of a close box click to the map:
/* 283 */     e.cancelBubble = true;
/* 284 */ 
/* 285 */     if (e.stopPropagation) {
/* 286 */ 
/* 287 */       e.stopPropagation();
/* 288 */     }
/* 289 */ 
/* 290 */     /**
/* 291 *|      * This event is fired when the InfoBox's close box is clicked.
/* 292 *|      * @name InfoBox#closeclick
/* 293 *|      * @event
/* 294 *|      */
/* 295 */     google.maps.event.trigger(me, "closeclick");
/* 296 */ 
/* 297 */     me.close();
/* 298 */   };
/* 299 */ };
/* 300 */ 

/* infobox-1.1.11.js */

/* 301 */ /**
/* 302 *|  * Pans the map so that the InfoBox appears entirely within the map's visible area.
/* 303 *|  * @private
/* 304 *|  */
/* 305 */ InfoBox.prototype.panBox_ = function (disablePan) {
/* 306 */ 
/* 307 */   var map;
/* 308 */   var bounds;
/* 309 */   var xOffset = 0, yOffset = 0;
/* 310 */ 
/* 311 */   if (!disablePan) {
/* 312 */ 
/* 313 */     map = this.getMap();
/* 314 */ 
/* 315 */     if (map instanceof google.maps.Map) { // Only pan if attached to map, not panorama
/* 316 */ 
/* 317 */       if (!map.getBounds().contains(this.position_)) {
/* 318 */       // Marker not in visible area of map, so set center
/* 319 */       // of map to the marker position first.
/* 320 */         map.setCenter(this.position_);
/* 321 */       }
/* 322 */ 
/* 323 */       bounds = map.getBounds();
/* 324 */ 
/* 325 */       var mapDiv = map.getDiv();
/* 326 */       var mapWidth = mapDiv.offsetWidth;
/* 327 */       var mapHeight = mapDiv.offsetHeight;
/* 328 */       var iwOffsetX = this.pixelOffset_.width;
/* 329 */       var iwOffsetY = this.pixelOffset_.height;
/* 330 */       var iwWidth = this.div_.offsetWidth;
/* 331 */       var iwHeight = this.div_.offsetHeight;
/* 332 */       var padX = this.infoBoxClearance_.width;
/* 333 */       var padY = this.infoBoxClearance_.height;
/* 334 */       var pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);
/* 335 */ 
/* 336 */       if (pixPosition.x < (-iwOffsetX + padX)) {
/* 337 */         xOffset = pixPosition.x + iwOffsetX - padX;
/* 338 */       } else if ((pixPosition.x + iwWidth + iwOffsetX + padX) > mapWidth) {
/* 339 */         xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;
/* 340 */       }
/* 341 */       if (this.alignBottom_) {
/* 342 */         if (pixPosition.y < (-iwOffsetY + padY + iwHeight)) {
/* 343 */           yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;
/* 344 */         } else if ((pixPosition.y + iwOffsetY + padY) > mapHeight) {
/* 345 */           yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;
/* 346 */         }
/* 347 */       } else {
/* 348 */         if (pixPosition.y < (-iwOffsetY + padY)) {
/* 349 */           yOffset = pixPosition.y + iwOffsetY - padY;
/* 350 */         } else if ((pixPosition.y + iwHeight + iwOffsetY + padY) > mapHeight) {

/* infobox-1.1.11.js */

/* 351 */           yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;
/* 352 */         }
/* 353 */       }
/* 354 */ 
/* 355 */       if (!(xOffset === 0 && yOffset === 0)) {
/* 356 */ 
/* 357 */         // Move the map to the shifted center.
/* 358 */         //
/* 359 */         var c = map.getCenter();
/* 360 */         map.panBy(xOffset, yOffset);
/* 361 */       }
/* 362 */     }
/* 363 */   }
/* 364 */ };
/* 365 */ 
/* 366 */ /**
/* 367 *|  * Sets the style of the InfoBox by setting the style sheet and applying
/* 368 *|  * other specific styles requested.
/* 369 *|  * @private
/* 370 *|  */
/* 371 */ InfoBox.prototype.setBoxStyle_ = function () {
/* 372 */ 
/* 373 */   var i, boxStyle;
/* 374 */ 
/* 375 */   if (this.div_) {
/* 376 */ 
/* 377 */     // Apply style values from the style sheet defined in the boxClass parameter:
/* 378 */     this.div_.className = this.boxClass_;
/* 379 */ 
/* 380 */     // Clear existing inline style values:
/* 381 */     this.div_.style.cssText = "";
/* 382 */ 
/* 383 */     // Apply style values defined in the boxStyle parameter:
/* 384 */     boxStyle = this.boxStyle_;
/* 385 */     for (i in boxStyle) {
/* 386 */ 
/* 387 */       if (boxStyle.hasOwnProperty(i)) {
/* 388 */ 
/* 389 */         this.div_.style[i] = boxStyle[i];
/* 390 */       }
/* 391 */     }
/* 392 */ 
/* 393 */     // Fix up opacity style for benefit of MSIE:
/* 394 */     //
/* 395 */     if (typeof this.div_.style.opacity !== "undefined" && this.div_.style.opacity !== "") {
/* 396 */ 
/* 397 */       this.div_.style.filter = "alpha(opacity=" + (this.div_.style.opacity * 100) + ")";
/* 398 */     }
/* 399 */ 
/* 400 */     // Apply required styles:

/* infobox-1.1.11.js */

/* 401 */     //
/* 402 */     this.div_.style.position = "absolute";
/* 403 */     this.div_.style.visibility = 'hidden';
/* 404 */     if (this.zIndex_ !== null) {
/* 405 */ 
/* 406 */       this.div_.style.zIndex = this.zIndex_;
/* 407 */     }
/* 408 */   }
/* 409 */ };
/* 410 */ 
/* 411 */ /**
/* 412 *|  * Get the widths of the borders of the InfoBox.
/* 413 *|  * @private
/* 414 *|  * @return {Object} widths object (top, bottom left, right)
/* 415 *|  */
/* 416 */ InfoBox.prototype.getBoxWidths_ = function () {
/* 417 */ 
/* 418 */   var computedStyle;
/* 419 */   var bw = {top: 0, bottom: 0, left: 0, right: 0};
/* 420 */   var box = this.div_;
/* 421 */ 
/* 422 */   if (document.defaultView && document.defaultView.getComputedStyle) {
/* 423 */ 
/* 424 */     computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, "");
/* 425 */ 
/* 426 */     if (computedStyle) {
/* 427 */ 
/* 428 */       // The computed styles are always in pixel units (good!)
/* 429 */       bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;
/* 430 */       bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;
/* 431 */       bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;
/* 432 */       bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;
/* 433 */     }
/* 434 */ 
/* 435 */   } else if (document.documentElement.currentStyle) { // MSIE
/* 436 */ 
/* 437 */     if (box.currentStyle) {
/* 438 */ 
/* 439 */       // The current styles may not be in pixel units, but assume they are (bad!)
/* 440 */       bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;
/* 441 */       bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;
/* 442 */       bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;
/* 443 */       bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;
/* 444 */     }
/* 445 */   }
/* 446 */ 
/* 447 */   return bw;
/* 448 */ };
/* 449 */ 
/* 450 */ /**

/* infobox-1.1.11.js */

/* 451 *|  * Invoked when <tt>close</tt> is called. Do not call it directly.
/* 452 *|  */
/* 453 */ InfoBox.prototype.onRemove = function () {
/* 454 */ 
/* 455 */   if (this.div_) {
/* 456 */ 
/* 457 */     this.div_.parentNode.removeChild(this.div_);
/* 458 */     this.div_ = null;
/* 459 */   }
/* 460 */ };
/* 461 */ 
/* 462 */ /**
/* 463 *|  * Draws the InfoBox based on the current map projection and zoom level.
/* 464 *|  */
/* 465 */ InfoBox.prototype.draw = function () {
/* 466 */ 
/* 467 */   this.createInfoBoxDiv_();
/* 468 */ 
/* 469 */   var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);
/* 470 */ 
/* 471 */   this.div_.style.left = (pixPosition.x + this.pixelOffset_.width) + "px";
/* 472 */   
/* 473 */   if (this.alignBottom_) {
/* 474 */     this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + "px";
/* 475 */   } else {
/* 476 */     this.div_.style.top = (pixPosition.y + this.pixelOffset_.height) + "px";
/* 477 */   }
/* 478 */ 
/* 479 */   if (this.isHidden_) {
/* 480 */ 
/* 481 */     this.div_.style.visibility = 'hidden';
/* 482 */ 
/* 483 */   } else {
/* 484 */ 
/* 485 */     this.div_.style.visibility = "visible";
/* 486 */   }
/* 487 */ };
/* 488 */ 
/* 489 */ /**
/* 490 *|  * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,
/* 491 *|  *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>
/* 492 *|  *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one
/* 493 *|  *  is <tt>open</tt>ed.
/* 494 *|  * @param {InfoBoxOptions} opt_opts
/* 495 *|  */
/* 496 */ InfoBox.prototype.setOptions = function (opt_opts) {
/* 497 */   if (typeof opt_opts.boxClass !== "undefined") { // Must be first
/* 498 */ 
/* 499 */     this.boxClass_ = opt_opts.boxClass;
/* 500 */     this.setBoxStyle_();

/* infobox-1.1.11.js */

/* 501 */   }
/* 502 */   if (typeof opt_opts.boxStyle !== "undefined") { // Must be second
/* 503 */ 
/* 504 */     this.boxStyle_ = opt_opts.boxStyle;
/* 505 */     this.setBoxStyle_();
/* 506 */   }
/* 507 */   if (typeof opt_opts.content !== "undefined") {
/* 508 */ 
/* 509 */     this.setContent(opt_opts.content);
/* 510 */   }
/* 511 */   if (typeof opt_opts.disableAutoPan !== "undefined") {
/* 512 */ 
/* 513 */     this.disableAutoPan_ = opt_opts.disableAutoPan;
/* 514 */   }
/* 515 */   if (typeof opt_opts.maxWidth !== "undefined") {
/* 516 */ 
/* 517 */     this.maxWidth_ = opt_opts.maxWidth;
/* 518 */   }
/* 519 */   if (typeof opt_opts.pixelOffset !== "undefined") {
/* 520 */ 
/* 521 */     this.pixelOffset_ = opt_opts.pixelOffset;
/* 522 */   }
/* 523 */   if (typeof opt_opts.alignBottom !== "undefined") {
/* 524 */ 
/* 525 */     this.alignBottom_ = opt_opts.alignBottom;
/* 526 */   }
/* 527 */   if (typeof opt_opts.position !== "undefined") {
/* 528 */ 
/* 529 */     this.setPosition(opt_opts.position);
/* 530 */   }
/* 531 */   if (typeof opt_opts.zIndex !== "undefined") {
/* 532 */ 
/* 533 */     this.setZIndex(opt_opts.zIndex);
/* 534 */   }
/* 535 */   if (typeof opt_opts.closeBoxMargin !== "undefined") {
/* 536 */ 
/* 537 */     this.closeBoxMargin_ = opt_opts.closeBoxMargin;
/* 538 */   }
/* 539 */   if (typeof opt_opts.closeBoxURL !== "undefined") {
/* 540 */ 
/* 541 */     this.closeBoxURL_ = opt_opts.closeBoxURL;
/* 542 */   }
/* 543 */   if (typeof opt_opts.infoBoxClearance !== "undefined") {
/* 544 */ 
/* 545 */     this.infoBoxClearance_ = opt_opts.infoBoxClearance;
/* 546 */   }
/* 547 */   if (typeof opt_opts.isHidden !== "undefined") {
/* 548 */ 
/* 549 */     this.isHidden_ = opt_opts.isHidden;
/* 550 */   }

/* infobox-1.1.11.js */

/* 551 */   if (typeof opt_opts.enableEventPropagation !== "undefined") {
/* 552 */ 
/* 553 */     this.enableEventPropagation_ = opt_opts.enableEventPropagation;
/* 554 */   }
/* 555 */ 
/* 556 */   if (this.div_) {
/* 557 */ 
/* 558 */     this.draw();
/* 559 */   }
/* 560 */ };
/* 561 */ 
/* 562 */ /**
/* 563 *|  * Sets the content of the InfoBox.
/* 564 *|  *  The content can be plain text or an HTML DOM node.
/* 565 *|  * @param {string|Node} content
/* 566 *|  */
/* 567 */ InfoBox.prototype.setContent = function (content) {
/* 568 */   this.content_ = content;
/* 569 */ 
/* 570 */   if (this.div_) {
/* 571 */ 
/* 572 */     if (this.closeListener_) {
/* 573 */ 
/* 574 */       google.maps.event.removeListener(this.closeListener_);
/* 575 */       this.closeListener_ = null;
/* 576 */     }
/* 577 */ 
/* 578 */     // Odd code required to make things work with MSIE.
/* 579 */     //
/* 580 */     if (!this.fixedWidthSet_) {
/* 581 */ 
/* 582 */       this.div_.style.width = "";
/* 583 */     }
/* 584 */ 
/* 585 */     if (typeof content.nodeType === "undefined") {
/* 586 */       this.div_.innerHTML = this.getCloseBoxImg_() + content;
/* 587 */     } else {
/* 588 */       this.div_.innerHTML = this.getCloseBoxImg_();
/* 589 */       this.div_.appendChild(content);
/* 590 */     }
/* 591 */ 
/* 592 */     // Perverse code required to make things work with MSIE.
/* 593 */     // (Ensures the close box does, in fact, float to the right.)
/* 594 */     //
/* 595 */     if (!this.fixedWidthSet_) {
/* 596 */       this.div_.style.width = this.div_.offsetWidth + "px";
/* 597 */       if (typeof content.nodeType === "undefined") {
/* 598 */         this.div_.innerHTML = this.getCloseBoxImg_() + content;
/* 599 */       } else {
/* 600 */         this.div_.innerHTML = this.getCloseBoxImg_();

/* infobox-1.1.11.js */

/* 601 */         this.div_.appendChild(content);
/* 602 */       }
/* 603 */     }
/* 604 */ 
/* 605 */     this.addClickHandler_();
/* 606 */   }
/* 607 */ 
/* 608 */   /**
/* 609 *|    * This event is fired when the content of the InfoBox changes.
/* 610 *|    * @name InfoBox#content_changed
/* 611 *|    * @event
/* 612 *|    */
/* 613 */   google.maps.event.trigger(this, "content_changed");
/* 614 */ };
/* 615 */ 
/* 616 */ /**
/* 617 *|  * Sets the geographic location of the InfoBox.
/* 618 *|  * @param {LatLng} latlng
/* 619 *|  */
/* 620 */ InfoBox.prototype.setPosition = function (latlng) {
/* 621 */ 
/* 622 */   this.position_ = latlng;
/* 623 */ 
/* 624 */   if (this.div_) {
/* 625 */ 
/* 626 */     this.draw();
/* 627 */   }
/* 628 */ 
/* 629 */   /**
/* 630 *|    * This event is fired when the position of the InfoBox changes.
/* 631 *|    * @name InfoBox#position_changed
/* 632 *|    * @event
/* 633 *|    */
/* 634 */   google.maps.event.trigger(this, "position_changed");
/* 635 */ };
/* 636 */ 
/* 637 */ /**
/* 638 *|  * Sets the zIndex style for the InfoBox.
/* 639 *|  * @param {number} index
/* 640 *|  */
/* 641 */ InfoBox.prototype.setZIndex = function (index) {
/* 642 */ 
/* 643 */   this.zIndex_ = index;
/* 644 */ 
/* 645 */   if (this.div_) {
/* 646 */ 
/* 647 */     this.div_.style.zIndex = index;
/* 648 */   }
/* 649 */ 
/* 650 */   /**

/* infobox-1.1.11.js */

/* 651 *|    * This event is fired when the zIndex of the InfoBox changes.
/* 652 *|    * @name InfoBox#zindex_changed
/* 653 *|    * @event
/* 654 *|    */
/* 655 */   google.maps.event.trigger(this, "zindex_changed");
/* 656 */ };
/* 657 */ 
/* 658 */ /**
/* 659 *|  * Returns the content of the InfoBox.
/* 660 *|  * @returns {string}
/* 661 *|  */
/* 662 */ InfoBox.prototype.getContent = function () {
/* 663 */ 
/* 664 */   return this.content_;
/* 665 */ };
/* 666 */ 
/* 667 */ /**
/* 668 *|  * Returns the geographic location of the InfoBox.
/* 669 *|  * @returns {LatLng}
/* 670 *|  */
/* 671 */ InfoBox.prototype.getPosition = function () {
/* 672 */ 
/* 673 */   return this.position_;
/* 674 */ };
/* 675 */ 
/* 676 */ /**
/* 677 *|  * Returns the zIndex for the InfoBox.
/* 678 *|  * @returns {number}
/* 679 *|  */
/* 680 */ InfoBox.prototype.getZIndex = function () {
/* 681 */ 
/* 682 */   return this.zIndex_;
/* 683 */ };
/* 684 */ 
/* 685 */ /**
/* 686 *|  * Shows the InfoBox.
/* 687 *|  */
/* 688 */ InfoBox.prototype.show = function () {
/* 689 */ 
/* 690 */   this.isHidden_ = false;
/* 691 */   if (this.div_) {
/* 692 */     this.div_.style.visibility = "visible";
/* 693 */   }
/* 694 */ };
/* 695 */ 
/* 696 */ /**
/* 697 *|  * Hides the InfoBox.
/* 698 *|  */
/* 699 */ InfoBox.prototype.hide = function () {
/* 700 */ 

/* infobox-1.1.11.js */

/* 701 */   this.isHidden_ = true;
/* 702 */   if (this.div_) {
/* 703 */     this.div_.style.visibility = "hidden";
/* 704 */   }
/* 705 */ };
/* 706 */ 
/* 707 */ /**
/* 708 *|  * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>
/* 709 *|  *  (usually a <tt>google.maps.Marker</tt>) is specified, the position
/* 710 *|  *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the
/* 711 *|  *  anchor is dragged to a new location, the InfoBox moves as well.
/* 712 *|  * @param {Map|StreetViewPanorama} map
/* 713 *|  * @param {MVCObject} [anchor]
/* 714 *|  */
/* 715 */ InfoBox.prototype.open = function (map, anchor) {
/* 716 */ 
/* 717 */   var me = this;
/* 718 */ 
/* 719 */   if (anchor) {
/* 720 */ 
/* 721 */     this.position_ = anchor.getPosition();
/* 722 */     this.moveListener_ = google.maps.event.addListener(anchor, "position_changed", function () {
/* 723 */       me.setPosition(this.getPosition());
/* 724 */     });
/* 725 */   }
/* 726 */ 
/* 727 */   this.setMap(map);
/* 728 */ 
/* 729 */   if (this.div_) {
/* 730 */ 
/* 731 */     this.panBox_();
/* 732 */   }
/* 733 */ };
/* 734 */ 
/* 735 */ /**
/* 736 *|  * Removes the InfoBox from the map.
/* 737 *|  */
/* 738 */ InfoBox.prototype.close = function () {
/* 739 */ 
/* 740 */   var i;
/* 741 */ 
/* 742 */   if (this.closeListener_) {
/* 743 */ 
/* 744 */     google.maps.event.removeListener(this.closeListener_);
/* 745 */     this.closeListener_ = null;
/* 746 */   }
/* 747 */ 
/* 748 */   if (this.eventListeners_) {
/* 749 */     
/* 750 */     for (i = 0; i < this.eventListeners_.length; i++) {

/* infobox-1.1.11.js */

/* 751 */ 
/* 752 */       google.maps.event.removeListener(this.eventListeners_[i]);
/* 753 */     }
/* 754 */     this.eventListeners_ = null;
/* 755 */   }
/* 756 */ 
/* 757 */   if (this.moveListener_) {
/* 758 */ 
/* 759 */     google.maps.event.removeListener(this.moveListener_);
/* 760 */     this.moveListener_ = null;
/* 761 */   }
/* 762 */ 
/* 763 */   if (this.contextListener_) {
/* 764 */ 
/* 765 */     google.maps.event.removeListener(this.contextListener_);
/* 766 */     this.contextListener_ = null;
/* 767 */   }
/* 768 */ 
/* 769 */   this.setMap(null);
/* 770 */ };
/* 771 */ 
