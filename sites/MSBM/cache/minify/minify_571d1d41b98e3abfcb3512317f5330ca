
/* common.js */

/* 1   */ /*
/* 2   *|  * Copyright Â© 2010 - 2013 Modo Labs Inc. All rights reserved.
/* 3   *|  *
/* 4   *|  * The license governing the contents of this file is located in the LICENSE
/* 5   *|  * file located at the root directory of this distribution. If the LICENSE file
/* 6   *|  * is missing, please contact sales@modolabs.com.
/* 7   *|  *
/* 8   *|  */
/* 9   */ 
/* 10  */ String.prototype.strip = function() {
/* 11  */     return this.replace(/^\s+/, '').replace(/\s+$/, '');
/* 12  */ }
/* 13  */ 
/* 14  */ function showTab(id) {
/* 15  */     var tabId = id+'-tab';
/* 16  */     var tabbodyId = id+'-tabbody';
/* 17  */     
/* 18  */     var tab = document.getElementById(tabId);
/* 19  */     var tabbody = document.getElementById(tabbodyId);
/* 20  */     if (!tab || !tabbody) { return; } // safety check
/* 21  */     
/* 22  */     var tabs = tab.parentNode.getElementsByTagName('li');
/* 23  */     if (!tabs) { return; } // safety check
/* 24  */     
/* 25  */     var tabBodies = tabbody.parentNode.childNodes;
/* 26  */     if (!tabBodies) { return; } // safety check
/* 27  */     
/* 28  */     // Display the tab body and hide others
/* 29  */     for (var i = 0; i < tabBodies.length; i++) {
/* 30  */         if (tabBodies[i].id == tabbodyId) {
/* 31  */             show(tabBodies[i].id);
/* 32  */         } else {
/* 33  */             hide(tabBodies[i].id);
/* 34  */         }
/* 35  */     }
/* 36  */     
/* 37  */     // Display the tab and hide others
/* 38  */     for (var i = 0; i < tabs.length; i++) {
/* 39  */         if (tabs[i].id == tabId) {
/* 40  */             addClass(tabs[i], 'active');
/* 41  */         } else {
/* 42  */             removeClass(tabs[i], 'active');
/* 43  */         }
/* 44  */     }
/* 45  */     
/* 46  */     // fake resize event in case tab body was resized while hidden 
/* 47  */     if (document.createEvent) {
/* 48  */         var e = document.createEvent('HTMLEvents');
/* 49  */         e.initEvent('resize', true, true);
/* 50  */         window.dispatchEvent(e);

/* common.js */

/* 51  */     
/* 52  */     } else if( document.createEventObject ) {
/* 53  */         var e = document.createEventObject();
/* 54  */         document.documentElement.fireEvent('onresize', e);
/* 55  */     }
/* 56  */     
/* 57  */     onDOMChange();
/* 58  */ }
/* 59  */ 
/* 60  */ function onOrientationChange() {
/* 61  */     /* the galaxy tab sends orientation change events constantly */
/* 62  */     if (typeof onOrientationChange.lastOrientation == 'undefined') {
/* 63  */         onOrientationChange.lastOrientation = null;
/* 64  */     }
/* 65  */     
/* 66  */     var newOrientation = getOrientation();
/* 67  */     
/* 68  */     if (newOrientation != onOrientationChange.lastOrientation) {
/* 69  */         rotateScreen();
/* 70  */         
/* 71  */         if (typeof onOrientationChange.callbackFunctions !== 'undefined') {
/* 72  */             for (var i = 0; i < onOrientationChange.callbackFunctions.length; i++) {
/* 73  */                 onOrientationChange.callbackFunctions[i]();
/* 74  */             }
/* 75  */         }
/* 76  */         
/* 77  */         onOrientationChange.lastOrientation = newOrientation;
/* 78  */     }
/* 79  */ }
/* 80  */ 
/* 81  */ function onResize() {
/* 82  */     if (typeof onResize.callbackFunctions !== 'undefined') {
/* 83  */         for (var i = 0; i < onResize.callbackFunctions.length; i++) {
/* 84  */             onResize.callbackFunctions[i]();
/* 85  */         }
/* 86  */     }
/* 87  */ 
/* 88  */     setOrientation(getOrientation());
/* 89  */ }
/* 90  */ 
/* 91  */ function addOnOrientationChangeCallback(callback) {
/* 92  */     if (typeof onOrientationChange.callbackFunctions == 'undefined') {
/* 93  */         onOrientationChange.callbackFunctions = [];
/* 94  */     }
/* 95  */     onOrientationChange.callbackFunctions.push(callback);
/* 96  */     
/* 97  */     if (typeof onResize.callbackFunctions == 'undefined') {
/* 98  */         onResize.callbackFunctions = [];
/* 99  */     }
/* 100 */     onResize.callbackFunctions.push(callback);

/* common.js */

/* 101 */ }
/* 102 */ 
/* 103 */ function setupOrientationChangeHandlers() {
/* 104 */     if (window.addEventListener) {
/* 105 */         window.addEventListener("orientationchange", onOrientationChange, false);
/* 106 */     } else if (window.attachEvent) {
/* 107 */         window.attachEvent("onorientationchange", onOrientationChange);
/* 108 */     }
/* 109 */     if (window.addEventListener) {
/* 110 */         window.addEventListener("resize", onResize, false);
/* 111 */     } else if (window.attachEvent) {
/* 112 */         window.attachEvent("onresize", onResize);
/* 113 */     }
/* 114 */ }
/* 115 */ 
/* 116 */ function rotateScreen() {
/* 117 */     setTimeout(scrollToTop, 500);
/* 118 */ }
/* 119 */ 
/* 120 */ function getOrientation() {
/* 121 */     var width = document.documentElement.clientWidth || document.body.clientWidth;
/* 122 */     var height = document.documentElement.clientHeight || document.body.clientHeight;
/* 123 */ 
/* 124 */     return (width > height) ? 'landscape' : 'portrait';
/* 125 */ }
/* 126 */ 
/* 127 */ function setOrientation(orientation) {
/* 128 */     var body = document.getElementsByTagName("body")[0];
/* 129 */  
/* 130 */     // remove existing portrait/landscape class if there
/* 131 */     removeClass(body, 'portrait');
/* 132 */     removeClass(body, 'landscape');
/* 133 */     addClass(body, orientation);
/* 134 */ }
/* 135 */ 
/* 136 */ // Localized ajax loading and error content
/* 137 */ // takes either an element or an id
/* 138 */ function showAjaxLoadingMsg(e) {
/* 139 */     if (typeof e == 'string') {
/* 140 */         e = document.getElementById(element);
/* 141 */     }
/* 142 */     if (e) {
/* 143 */       e.innerHTML = AJAX_CONTENT_LOADING_HTML;
/* 144 */     }
/* 145 */     onDOMChange();
/* 146 */ }
/* 147 */ 
/* 148 */ function showAjaxErrorMsg(e) {
/* 149 */     if (typeof e == 'string') {
/* 150 */         e = document.getElementById(element);

/* common.js */

/* 151 */     }
/* 152 */     if (e) {
/* 153 */       e.innerHTML = AJAX_CONTENT_ERROR_HTML;
/* 154 */     }
/* 155 */     onDOMChange();
/* 156 */ }
/* 157 */ 
/* 158 */ function hide(strID) {
/* 159 */     // Hides the object with ID strID 
/* 160 */     var objToHide = document.getElementById(strID);
/* 161 */     if (objToHide) {
/* 162 */         objToHide.style.display = "none";
/* 163 */     }
/* 164 */     onDOMChange();
/* 165 */ }
/* 166 */ 
/* 167 */ function show(strID) {
/* 168 */     // Displays the object with ID strID 
/* 169 */     var objToHide = document.getElementById(strID);
/* 170 */     if (objToHide) {
/* 171 */         objToHide.style.display = "block";
/* 172 */     }
/* 173 */     onDOMChange();
/* 174 */ }
/* 175 */ 
/* 176 */ function showHideFull(objContainer) {
/* 177 */     var strClass = objContainer.className;
/* 178 */     if (strClass.indexOf("collapsed") > -1) {
/* 179 */         strClass = strClass.replace("collapsed","expanded");
/* 180 */     } else {
/* 181 */         strClass = strClass.replace("expanded","collapsed");
/* 182 */     }
/* 183 */     objContainer.className = strClass;
/* 184 */     objContainer.blur();
/* 185 */     
/* 186 */     onDOMChange();
/* 187 */ }
/* 188 */ 
/* 189 */ function clearField(objField,strDefault) {
/* 190 */     // Clears the placeholder text in an input field if it matches the default string - fixes a bug in Android
/* 191 */ 	  if ((objField.value == strDefault) || (objField.value == "")) {
/* 192 */ 		    objField.value = "";
/* 193 */ 	  }
/* 194 */ }
/* 195 */ 
/* 196 */ // Android doesn't respond to onfocus="clearField(...)" until the 
/* 197 */ // input field loses focus
/* 198 */ function androidPlaceholderFix(searchbox) {
/* 199 */     // this forces the search box to display the empty string
/* 200 */     // instead of the place holder when the search box takes focus

/* common.js */

/* 201 */     if (searchbox.value == "") {
/* 202 */         searchbox.value = "";
/* 203 */     }
/* 204 */ }
/* 205 */ 
/* 206 */ function getCookie(name) {
/* 207 */     var cookie = document.cookie;
/* 208 */     var result = "";
/* 209 */     var start = cookie.indexOf(name + "=");
/* 210 */     if (start > -1) {
/* 211 */         start += name.length + 1;
/* 212 */         var end = cookie.indexOf(";", start);
/* 213 */         if (end < 0) {
/* 214 */             end = cookie.length;
/* 215 */         }
/* 216 */         result = unescape(cookie.substring(start, end));
/* 217 */     }
/* 218 */     return result;
/* 219 */ }
/* 220 */ 
/* 221 */ function clearCookie(name, path) {
/* 222 */     var value = 'deleted';
/* 223 */     var exdate = new Date(0);
/* 224 */     var exdateclause = "; expires=" + exdate.toGMTString();
/* 225 */     var pathclause = (path == null) ? "" : "; path=" + path;
/* 226 */     document.cookie = name + "=" + escape(value) + exdateclause + pathclause;
/* 227 */ }
/* 228 */ 
/* 229 */ function setCookie(name, value, expireseconds, path) {
/* 230 */     var exdate = new Date();
/* 231 */     exdate.setTime(exdate.getTime() + (expireseconds * 1000));
/* 232 */     var exdateclause = (expireseconds == 0) ? "" : "; expires=" + exdate.toGMTString();
/* 233 */     var pathclause = (path == null) ? "" : "; path=" + path;
/* 234 */     document.cookie = name + "=" + escape(value) + exdateclause + pathclause;
/* 235 */ }
/* 236 */ 
/* 237 */ function getCookieArrayValue(name) {
/* 238 */     var value = getCookie(name);
/* 239 */     if (value && value.length) {
/* 240 */         return value.split('@@');
/* 241 */     } else {
/* 242 */         return new Array();
/* 243 */     }
/* 244 */ }
/* 245 */ 
/* 246 */ function setCookieArrayValue(name, values, expireseconds, path) {
/* 247 */     var value = '';
/* 248 */     if (values && values.length) {
/* 249 */         value = values.join('@@');
/* 250 */     }

/* common.js */

/* 251 */     setCookie(name, value, expireseconds, path);
/* 252 */ }
/* 253 */ 
/* 254 */ function hasClass(ele,cls) {
/* 255 */     return ele.className.match(new RegExp('(\\s|^)'+cls+'(\\s|$)'));
/* 256 */ }
/* 257 */         
/* 258 */ function addClass(ele,cls) {
/* 259 */     if (!this.hasClass(ele,cls)) ele.className += " "+cls;
/* 260 */ }
/* 261 */ 
/* 262 */ function removeClass(ele,cls) {
/* 263 */     if (hasClass(ele,cls)) {
/* 264 */         var reg = new RegExp('(\\s|^)'+cls+'(\\s|$)');
/* 265 */         ele.className=ele.className.replace(reg,' ').strip();
/* 266 */     }
/* 267 */ }
/* 268 */         
/* 269 */ function toggleClass(ele, cls) {
/* 270 */     if (hasClass(ele, cls)) {
/* 271 */         removeClass(ele, cls);
/* 272 */     } else {
/* 273 */         addClass(ele, cls);
/* 274 */     }
/* 275 */ }
/* 276 */ 
/* 277 */ // Share-related functions
/* 278 */ function showShare() {
/* 279 */     var sharesheet = document.getElementById("sharesheet");
/* 280 */     if (!sharesheet) {
/* 281 */         return;
/* 282 */     }
/* 283 */     if (!sharesheet.parentNode || sharesheet.parentNode.nodeName != 'BODY') {
/* 284 */         var elements = document.getElementsByTagName('body');
/* 285 */         if (elements.length) {
/* 286 */             var body = elements[0];
/* 287 */             body.appendChild(sharesheet);
/* 288 */         }
/* 289 */     }
/* 290 */     sharesheet.style.display="block";
/* 291 */     var iframes = document.getElementsByTagName('iframe');
/* 292 */     for (var i = 0; i < iframes.length; i++) {
/* 293 */         iframes[i].style.visibility = 'hidden';
/* 294 */         iframes[i].style.height = '0';
/* 295 */     }
/* 296 */     window.scrollTo(0,0);
/* 297 */ }
/* 298 */ function hideShare() {
/* 299 */     if (!document.getElementById("sharesheet")) {
/* 300 */         return;

/* common.js */

/* 301 */     }
/* 302 */     document.getElementById("sharesheet").style.display="none";
/* 303 */     var iframes = document.getElementsByTagName('iframe');
/* 304 */     for (var i = 0; i < iframes.length; i++) {
/* 305 */         iframes[i].style.visibility = 'visible';
/* 306 */         iframes[i].style.height = '';
/* 307 */     }
/* 308 */ }
/* 309 */ 
/* 310 */ // Bookmarks
/* 311 */ function toggleBookmark(name, item, expireseconds, path, bookmarkId) {
/* 312 */     // facility for module to respond to bookmark state change
/* 313 */     if (typeof moduleBookmarkWillToggle != 'undefined') {
/* 314 */         $result = moduleBookmarkWillToggle(name, item, expireseconds, path);
/* 315 */         if ($result === false) { return; }
/* 316 */     }
/* 317 */   
/* 318 */     if (!bookmarkId) {
/* 319 */         bookmarkId = "bookmark";
/* 320 */     }
/* 321 */     var bookmark = document.getElementById(bookmarkId);
/* 322 */     toggleClass(bookmark, "on");
/* 323 */     var items = getCookieArrayValue(name);
/* 324 */     var newItems = new Array();
/* 325 */     if (items.length == 0) {
/* 326 */         newItems[0] = item;
/* 327 */     } else {
/* 328 */         var found = false;
/* 329 */         for (var i = 0; i < items.length; i++) {
/* 330 */             if (items[i] == item) {
/* 331 */                 found = true;
/* 332 */             } else {
/* 333 */                 newItems.push(items[i]);
/* 334 */             }
/* 335 */         }
/* 336 */         if (!found) {
/* 337 */             newItems.push(item);
/* 338 */         }
/* 339 */     }
/* 340 */     setCookieArrayValue(name, newItems, expireseconds, path);
/* 341 */     
/* 342 */     // facility for module to respond to bookmark state change
/* 343 */     if (typeof moduleBookmarkToggled != 'undefined') {
/* 344 */         moduleBookmarkToggled(name, item, expireseconds, path);
/* 345 */     }
/* 346 */ }
/* 347 */ 
/* 348 */ // TODO this needs to handle encoded strings and parameter separators (&amp;)
/* 349 */ if (typeof makeAPICall === 'undefined' && typeof jQuery === 'undefined') {
/* 350 */     function makeAPICall(type, module, command, data, callback) {

/* common.js */

/* 351 */         var urlParts = [];
/* 352 */         for (var param in data) {
/* 353 */             urlParts.push(param + "=" + data[param]);
/* 354 */         }
/* 355 */         url = URL_BASE + API_URL_PREFIX + '/' + module + '/' + command + '?' + urlParts.join('&');
/* 356 */         var handleError = function(errorObj) {}
/* 357 */     
/* 358 */         var httpRequest = new XMLHttpRequest();
/* 359 */         httpRequest.open("GET", url, true);
/* 360 */         httpRequest.onreadystatechange = function() {
/* 361 */             if (httpRequest.readyState == 4 && httpRequest.status == 200) {
/* 362 */                 var obj;
/* 363 */                 if (window.JSON) {
/* 364 */                     obj = JSON.parse(httpRequest.responseText);
/* 365 */                     // TODO: catch SyntaxError
/* 366 */                 } else {
/* 367 */                     obj = eval('(' + httpRequest.responseText + ')');
/* 368 */                 }
/* 369 */                 if (obj !== undefined) {
/* 370 */                     if ("response" in obj) {
/* 371 */                       callback(obj["response"]);
/* 372 */                     }
/* 373 */           
/* 374 */                     if ("error" in obj && obj["error"] !== null) {
/* 375 */                       handleError(obj["error"]);
/* 376 */                     } else {
/* 377 */                       handleError("response not found");
/* 378 */                     }
/* 379 */                 } else {
/* 380 */                     handleError("failed to parse response");
/* 381 */                 }
/* 382 */             }
/* 383 */         }
/* 384 */         httpRequest.send(null);
/* 385 */     }
/* 386 */ }
/* 387 */ 
/* 388 */ function ajaxContentIntoContainer(options) {
/* 389 */     if (typeof options != 'object') { return; } // safety
/* 390 */     
/* 391 */     if (typeof ajaxContentIntoContainer.pendingRequests == 'undefined') {
/* 392 */         ajaxContentIntoContainer.pendingRequests = new Array();
/* 393 */     }
/* 394 */     
/* 395 */     var _removeRequestsForContainer = function (container) {
/* 396 */         // go backwards so removing items doesn't cause us to skip requests
/* 397 */         for (var i = ajaxContentIntoContainer.pendingRequests.length-1; i >= 0; i--) {
/* 398 */             if (ajaxContentIntoContainer.pendingRequests[i].options.container == container) {
/* 399 */                 ajaxContentIntoContainer.pendingRequests[i].httpRequest.abort();
/* 400 */                 ajaxContentIntoContainer.pendingRequests.splice(i, 1);

/* common.js */

/* 401 */             }
/* 402 */         }
/* 403 */     }
/* 404 */     
/* 405 */     var _removeCompletedRequest = function (httpRequest) {
/* 406 */         for (var i = 0; i < ajaxContentIntoContainer.pendingRequests.length; i++) {
/* 407 */             if (ajaxContentIntoContainer.pendingRequests[i].httpRequest == httpRequest) {
/* 408 */                 ajaxContentIntoContainer.pendingRequests.splice(i, 1);
/* 409 */                 break;
/* 410 */             }
/* 411 */         }
/* 412 */     }
/* 413 */    
/* 414 */     var defaults = {
/* 415 */         url: null, 
/* 416 */         container: null, 
/* 417 */         timeout: 60, 
/* 418 */         addAjaxParameter: true,
/* 419 */         loadMessage: true,
/* 420 */         errorMessage: true,
/* 421 */         success: function () {},
/* 422 */         error: function (code) {} 
/* 423 */     };
/* 424 */     for (var i in defaults) {
/* 425 */         if (typeof options[i] == 'undefined') {
/* 426 */             options[i] = defaults[i];
/* 427 */         }
/* 428 */     }
/* 429 */     if (!options.url || !options.container) { return; } // safety
/* 430 */     
/* 431 */     if (options.addAjaxParameter && options.url.search(/[\?\&]ajax=/) < 0) {
/* 432 */         options.url += (options.url.search(/\?/) < 0 ? "?" : "&")+"ajax=1";
/* 433 */     }
/* 434 */     
/* 435 */     _removeRequestsForContainer(options.container);
/* 436 */     
/* 437 */     var httpRequest = new XMLHttpRequest();
/* 438 */     httpRequest.open("GET", options.url, true);
/* 439 */     
/* 440 */     var requestTimer = setTimeout(function() {
/* 441 */         // some browsers set readyState to 4 on abort so remove handler first
/* 442 */         httpRequest.onreadystatechange = function() { };
/* 443 */         httpRequest.abort();
/* 444 */         
/* 445 */         options.error(408); // http request timeout status code
/* 446 */     }, options.timeout * 1000);
/* 447 */     
/* 448 */     httpRequest.onreadystatechange = function() {
/* 449 */         // return if still in progress
/* 450 */         if (httpRequest.readyState != 4) { return; }

/* common.js */

/* 451 */         
/* 452 */         // Got answer, don't abort
/* 453 */         clearTimeout(requestTimer);
/* 454 */         
/* 455 */         if (httpRequest.status == 200) { // Success
/* 456 */             options.container.innerHTML = "";
/* 457 */             
/* 458 */             insertContentIntoContainer({
/* 459 */                 "container" : options.container,
/* 460 */                 "html"      : httpRequest.responseText
/* 461 */             });
/* 462 */             
/* 463 */             options.success();
/* 464 */             
/* 465 */         } else {
/* 466 */             if (options.errorMessage) {
/* 467 */                 showAjaxErrorMsg(options.container);
/* 468 */             }
/* 469 */             options.error(httpRequest.status);
/* 470 */         }
/* 471 */         
/* 472 */         _removeCompletedRequest(httpRequest);
/* 473 */     };
/* 474 */     
/* 475 */     if (options.loadMessage) {
/* 476 */         showAjaxLoadingMsg(options.container);
/* 477 */     }
/* 478 */     
/* 479 */     httpRequest.send(null);
/* 480 */     
/* 481 */     ajaxContentIntoContainer.pendingRequests.push({
/* 482 */         'options'     : options,
/* 483 */         'httpRequest' : httpRequest
/* 484 */     });
/* 485 */ }
/* 486 */ 
/* 487 */ function insertContentIntoContainer(options) {
/* 488 */     if (typeof options != 'object') { return; } // safety
/* 489 */ 
/* 490 */     var defaults = {
/* 491 */         html: null, 
/* 492 */         container: null
/* 493 */     };
/* 494 */     for (var i in defaults) {
/* 495 */         if (typeof options[i] == 'undefined') {
/* 496 */             options[i] = defaults[i];
/* 497 */         }
/* 498 */     }
/* 499 */     if (!options.html || !options.container) { return; } // safety
/* 500 */     

/* common.js */

/* 501 */     // If there are no non-empty non-script nodes before scripts then IE8 will 
/* 502 */     // remove all the scripts when innerHTML is used.  So temporarily add a 
/* 503 */     // non-empty div to the beginning of the HTML.
/* 504 */     var ie8HackId = '__insertContentIntoContainer_ie8Hack';
/* 505 */     options.container.innerHTML = '<div id="'+ie8HackId+'" style="display:none;">&nbsp;</div>'+options.html;
/* 506 */     
/* 507 */     var scripts = options.container.getElementsByTagName('script');
/* 508 */     for (var i = 0; i < scripts.length; i++) {
/* 509 */         var script = scripts[i];
/* 510 */         
/* 511 */         // Manually execute scripts
/* 512 */         var src = (script.text || script.textContent || script.innerHTML || "");
/* 513 */         if (src.length) {
/* 514 */             try {
/* 515 */                 if (window.execScript) {
/* 516 */                     window.execScript(src);
/* 517 */                 } else {
/* 518 */                     (function(src) {
/* 519 */                         window.eval.call(window, src);
/* 520 */                     })(src);
/* 521 */                 }
/* 522 */             } catch (e) {
/* 523 */             }
/* 524 */         } else if (script.src && script.src.length) {
/* 525 */             // create new javascript include and add to head
/* 526 */             // which is the only cross-browser way to ensure it executes
/* 527 */             var copy = document.createElement("script");
/* 528 */             if (script.type && script.type.length) {
/* 529 */                 copy.type = script.type;
/* 530 */             }
/* 531 */             copy.src = script.src;
/* 532 */             document.getElementsByTagName("head")[0].appendChild(copy);
/* 533 */         }
/* 534 */     }
/* 535 */     
/* 536 */     // move styles to head tag
/* 537 */     var styles = options.container.getElementsByTagName('style');
/* 538 */     for (var i = 0; i < styles.length; i++) {
/* 539 */         document.getElementsByTagName("head")[0].appendChild(styles[i]);
/* 540 */     }
/* 541 */     
/* 542 */     // remove IE8 hack
/* 543 */     var ie8Hack = document.getElementById(ie8HackId);
/* 544 */     if (ie8Hack) {
/* 545 */         ie8Hack.parentNode.removeChild(ie8Hack);
/* 546 */     }
/* 547 */     
/* 548 */     onDOMChange();
/* 549 */ }
/* 550 */ 

/* common.js */

/* 551 */ function getCSSValue(element, key) {
/* 552 */     if (window.getComputedStyle) {
/* 553 */       return document.defaultView.getComputedStyle(element, null).getPropertyValue(key);
/* 554 */         
/* 555 */     } else if (element.currentStyle) {
/* 556 */         if (key == 'float') { 
/* 557 */             key = 'styleFloat'; 
/* 558 */         } else {
/* 559 */             var re = /(\-([a-z]){1})/g; // hyphens to camel case
/* 560 */             if (re.test(key)) {
/* 561 */                 key = key.replace(re, function () {
/* 562 */                     return arguments[2].toUpperCase();
/* 563 */                 });
/* 564 */             }
/* 565 */         }
/* 566 */         var style = element.currentStyle[key] ? element.currentStyle[key] : '';
/* 567 */         
/* 568 */         // Fix IE8 border width and margins so that parseFloat doesn't return NaN on them
/* 569 */         var parts = [ 'Top', 'Left', 'Bottom', 'Right' ];
/* 570 */         for (var i = 0; i < parts.length; i++) {
/* 571 */             if (key == "border"+parts[i]+"Width" && element.currentStyle["border"+parts[i]+"Style"] == "none") {
/* 572 */                 style = "0px";
/* 573 */                 break;
/* 574 */             }
/* 575 */         }
/* 576 */         for (var i = 0; i < parts.length; i++) {
/* 577 */             if (key == "margin"+parts[i] && style == "auto") {
/* 578 */                 style = "0px";
/* 579 */                 break;
/* 580 */             }
/* 581 */         }
/* 582 */         return style;
/* 583 */     }
/* 584 */     return '';
/* 585 */ }
/* 586 */ 
/* 587 */ function setCSSValue(element, key, value) {
/* 588 */     if (key == 'float') { 
/* 589 */         key = 'styleFloat'; 
/* 590 */     } else {
/* 591 */         var re = /(\-([a-z]){1})/g; // hyphens to camel case
/* 592 */         if (re.test(key)) {
/* 593 */             key = key.replace(re, function () {
/* 594 */                 return arguments[2].toUpperCase();
/* 595 */             });
/* 596 */         }
/* 597 */     }
/* 598 */     
/* 599 */     try {
/* 600 */         element.style[key] = value; // IE will go kaboom here if the style is bad

/* common.js */

/* 601 */     } catch (e) {}
/* 602 */ }
/* 603 */ 
/* 604 */ function getCSSValueNumber(element, key) {
/* 605 */     var number = parseFloat(getCSSValue(element, key));
/* 606 */     return isNaN(number) ? 0 : number;
/* 607 */ }
/* 608 */ 
/* 609 */ function getCSSHeight(element) {
/* 610 */     return element.offsetHeight
/* 611 */         - getCSSValueNumber(element, 'border-top-width')
/* 612 */         - getCSSValueNumber(element, 'border-bottom-width')
/* 613 */         - getCSSValueNumber(element, 'padding-top')
/* 614 */         - getCSSValueNumber(element, 'padding-bottom');
/* 615 */ }
/* 616 */ 
/* 617 */ function getCSSWidth(element) {
/* 618 */     return element.offsetWidth
/* 619 */         - getCSSValueNumber(element, 'border-left-width') 
/* 620 */         - getCSSValueNumber(element, 'border-right-width')
/* 621 */         - getCSSValueNumber(element, 'padding-left')
/* 622 */         - getCSSValueNumber(element, 'padding-right');
/* 623 */ }
/* 624 */ 
/* 625 */ function _getStringForArgs(args) {
/* 626 */     var argString = "";
/* 627 */     if (typeof args == "string" && args.length) {
/* 628 */         argString = "?" + args;
/* 629 */     } else if (typeof args == "object") {
/* 630 */         for (var param in args) {
/* 631 */             argString += (argString.length ? "&" : "?") + 
/* 632 */                 param + "=" + encodeURIComponent(args[param]);
/* 633 */         }
/* 634 */     }
/* 635 */     return argString;    
/* 636 */ }
/* 637 */ 
/* 638 */ function redirectTo(page, args) {
/* 639 */     window.location = "./" + page + _getStringForArgs(args);
/* 640 */ }
/* 641 */ 
/* 642 */ function redirectToModule(module, page, args) {
/* 643 */     window.location = "../" + module + "/" + page + _getStringForArgs(args);
/* 644 */ }
/* 645 */ 
/* 646 */ /*
/* 647 *| 	Developed by Robert Nyman, http://www.robertnyman.com
/* 648 *| 	Code/licensing: http://code.google.com/p/getelementsbyclassname/
/* 649 *| 	
/* 650 *| 	Reversed element and tag arguments for convenience

/* common.js */

/* 651 *| */	
/* 652 */ var getElementsByClassName = function (className, elm, tag) {
/* 653 */     if (document.getElementsByClassName) {
/* 654 */         getElementsByClassName = function (className, elm, tag) {
/* 655 */             elm = elm || document;
/* 656 */             var elements = elm.getElementsByClassName(className),
/* 657 */                 nodeName = (tag)? new RegExp("\\b" + tag + "\\b", "i") : null,
/* 658 */                 returnElements = [],
/* 659 */                 current;
/* 660 */             for (var i=0, il=elements.length; i<il; i+=1){
/* 661 */                 current = elements[i];
/* 662 */                 if (!nodeName || nodeName.test(current.nodeName)) {
/* 663 */                     returnElements.push(current);
/* 664 */                 }
/* 665 */             }
/* 666 */             return returnElements;
/* 667 */         };
/* 668 */     }
/* 669 */     else if (document.evaluate) {
/* 670 */         getElementsByClassName = function (className, elm, tag) {
/* 671 */           tag = tag || "*";
/* 672 */           elm = elm || document;
/* 673 */           var classes = className.split(" "),
/* 674 */               classesToCheck = "",
/* 675 */               xhtmlNamespace = "http://www.w3.org/1999/xhtml",
/* 676 */               namespaceResolver = (document.documentElement.namespaceURI === xhtmlNamespace)? xhtmlNamespace : null,
/* 677 */               returnElements = [],
/* 678 */               elements,
/* 679 */               node;
/* 680 */           for (var j=0, jl=classes.length; j<jl; j+=1){
/* 681 */               classesToCheck += "[contains(concat(' ', @class, ' '), ' " + classes[j] + " ')]";
/* 682 */           }
/* 683 */           try	{
/* 684 */               elements = document.evaluate(".//" + tag + classesToCheck, elm, namespaceResolver, 0, null);
/* 685 */           }
/* 686 */           catch (e) {
/* 687 */               elements = document.evaluate(".//" + tag + classesToCheck, elm, null, 0, null);
/* 688 */           }
/* 689 */           while ((node = elements.iterateNext())) {
/* 690 */               returnElements.push(node);
/* 691 */           }
/* 692 */           return returnElements;
/* 693 */         };
/* 694 */     }
/* 695 */     else {
/* 696 */         getElementsByClassName = function (className, elm, tag) {
/* 697 */             tag = tag || "*";
/* 698 */             elm = elm || document;
/* 699 */             var classes = className.split(" "),
/* 700 */                 classesToCheck = [],

/* common.js */

/* 701 */                 elements = (tag === "*" && elm.all)? elm.all : elm.getElementsByTagName(tag),
/* 702 */                 current,
/* 703 */                 returnElements = [],
/* 704 */                 match;
/* 705 */             for (var k=0, kl=classes.length; k<kl; k+=1){
/* 706 */                 classesToCheck.push(new RegExp("(^|\\s)" + classes[k] + "(\\s|$)"));
/* 707 */             }
/* 708 */             for (var l=0, ll=elements.length; l<ll; l+=1){
/* 709 */                 current = elements[l];
/* 710 */                 match = false;
/* 711 */                 for(var m=0, ml=classesToCheck.length; m<ml; m+=1){
/* 712 */                     match = classesToCheck[m].test(current.className);
/* 713 */                     if (!match) {
/* 714 */                         break;
/* 715 */                     }
/* 716 */                 }
/* 717 */                 if (match) {
/* 718 */                     returnElements.push(current);
/* 719 */                 }
/* 720 */             }
/* 721 */             return returnElements;
/* 722 */         };
/* 723 */     }
/* 724 */     return getElementsByClassName(className, elm, tag);
/* 725 */ };
/* 726 */ 
/* 727 */ function getFirstElementByClassName(className, elem, tag) {
/* 728 */     var elements = getElementsByClassName(className, elem, tag);
/* 729 */     return elements.length ? elements[0] : null;
/* 730 */ }
/* 731 */ 
/* 732 */ function setUserContext(context, container, url, ajax, success) {
/* 733 */     if (!url) {
/* 734 */         return;
/* 735 */     }
/* 736 */     
/* 737 */     if (!ajax) {
/* 738 */         if (url.charAt(0)=='/') {
/* 739 */             url = URL_BASE + url.substr(1);
/* 740 */         }
/* 741 */ 
/* 742 */         window.location = url;
/* 743 */         return;
/* 744 */     }
/* 745 */     
/* 746 */     if (!document.getElementById(container)) {
/* 747 */         return;
/* 748 */     }
/* 749 */     
/* 750 */     var opts = {

/* common.js */

/* 751 */      url: url,
/* 752 */      container: document.getElementById(container),
/* 753 */      loadMessage: false,
/* 754 */      success: success
/* 755 */     }
/* 756 */     
/* 757 */     var userData = getCookie(MODULE_NAV_COOKIE);
/* 758 */     if (userData) {
/* 759 */         if (!confirm('Changing the home screen layout will reset your customized module order preferences. Are you sure you wish to update the layout?')) {
/* 760 */             return;
/* 761 */         }
/* 762 */         clearCookie(MODULE_NAV_COOKIE, COOKIE_PATH);
/* 763 */     }
/* 764 */ 
/* 765 */     ajaxContentIntoContainer(opts);
/* 766 */     scrollToTop();
/* 767 */     return false;
/* 768 */ }
/* 769 */ 
/* 770 */ function updateUserContextSelect(select, container) {
/* 771 */     var option = select.options[select.selectedIndex];
/* 772 */     var context = option.value;
/* 773 */     var url = option.getAttribute('url');
/* 774 */     var ajax = option.getAttribute('ajax');
/* 775 */     setUserContext(context, container, url, ajax);
/* 776 */ }
/* 777 */ 
/* 778 */ function updateUserContextLink(link, container) {
/* 779 */     var li = link.parentNode;
/* 780 */     var list = li.parentNode;
/* 781 */     var context = li.getAttribute('context');
/* 782 */     var url = li.getAttribute('url');
/* 783 */     var ajax = li.getAttribute('ajax');
/* 784 */     var result = setUserContext(context, container, url, ajax);
/* 785 */     if (typeof result == 'undefined') {
/* 786 */         return;
/* 787 */     }
/* 788 */     var lis = list.children;
/* 789 */     for (var i=0; i<lis.length; i++) {
/* 790 */         lis[i].className = '';
/* 791 */         if (context == lis[i].getAttribute('context')) {
/* 792 */             lis[i].className = 'contextSelected';
/* 793 */         }
/* 794 */     }
/* 795 */ }

;
/* tablet.js */

/* 1   */ /*
/* 2   *|  * Copyright Â© 2010 - 2013 Modo Labs Inc. All rights reserved.
/* 3   *|  *
/* 4   *|  * The license governing the contents of this file is located in the LICENSE
/* 5   *|  * file located at the root directory of this distribution. If the LICENSE file
/* 6   *|  * is missing, please contact sales@modolabs.com.
/* 7   *|  *
/* 8   *|  */
/* 9   */ 
/* 10  */ var containerScroller = null;
/* 11  */ var navScroller = null;
/* 12  */ 
/* 13  */ function onDOMChange() {
/* 14  */     if (containerScroller) {
/* 15  */         setTimeout(function () {
/* 16  */             containerScroller.refresh();
/* 17  */         }, 0);
/* 18  */     }
/* 19  */     if (navScroller) {
/* 20  */         setTimeout(function () {
/* 21  */             navScroller.refresh();
/* 22  */         }, 0);
/* 23  */     }
/* 24  */ }
/* 25  */ 
/* 26  */ function handleNavmenuButton(button) {
/* 27  */     try {
/* 28  */         toggleClass(button, 'selected');
/* 29  */         toggleClass(document.getElementById('navmenu'), 'open');
/* 30  */         if (navScroller) {
/* 31  */             navScroller.refresh();
/* 32  */         }
/* 33  */     } catch(e) { }
/* 34  */     return false;
/* 35  */ }
/* 36  */ 
/* 37  */ function handleWindowResize(e) {
/* 38  */     if (!('orientation' in window)) {
/* 39  */         rotateScreen();
/* 40  */     }
/* 41  */   
/* 42  */     if (typeof moduleHandleWindowResize != 'undefined') {
/* 43  */         moduleHandleWindowResize(e);
/* 44  */     }
/* 45  */     if (navigator.userAgent.match(/(Android [34]\.\d)/)) {
/* 46  */         // Android 3/4 browsers don't reliably set client and offset heights
/* 47  */         // before calling orientationchange or resize handlers.
/* 48  */         var self = this;
/* 49  */         setTimeout(function() {
/* 50  */             if (typeof moduleHandleWindowResize != 'undefined') {

/* tablet.js */

/* 51  */                 moduleHandleWindowResize(e);
/* 52  */             }
/* 53  */         }, 600); // approx. how long after the event before the offsetHeights are correct
/* 54  */     }
/* 55  */ } 
/* 56  */ 
/* 57  */ // form element-safe version of iScroll initialization
/* 58  */ function iScrollInit(element, options) {
/* 59  */     if (typeof element == 'string') {
/* 60  */         element = document.getElementById(element);
/* 61  */         if (!element) { return };
/* 62  */     }
/* 63  */     if (supportsOverflowScroll()) {
/* 64  */         // Used by devices which support overflow:scroll
/* 65  */         // CSS will set overflow:auto where necessary
/* 66  */         element.style['-webkit-overflow-scrolling'] = 'touch'; // bouncy webkit touch scroll
/* 67  */         
/* 68  */         // There is a bug in iOS 5 where position:relative elements inside an 
/* 69  */         // element with webkit-overflow-scrolling set to touch don't draw 
/* 70  */         // properly when they are initially scrolled offscreen. This hack works 
/* 71  */         // around the problem but also degrades performance so we only do it on
/* 72  */         // iPads running iOS 5:
/* 73  */         // http://stackoverflow.com/questions/7808110/css3-property-webkit-overflow-scrollingtouch-error
/* 74  */         if (isIOS5Browser() && element.childNodes && element.childNodes.length) {
/* 75  */             for (var i = 0; i < element.childNodes.length; i++) {
/* 76  */                 setCSSValue(element.childNodes[i], '-webkit-transform', 'translate3d(0, 0, 0)');
/* 77  */             }
/* 78  */         }
/* 79  */         addScrollingElement(element);
/* 80  */         return null;
/* 81  */         
/* 82  */     } else {
/* 83  */         // override CSS specifying overflow:scroll for browsers which support it
/* 84  */         setCSSValue(element, 'overflow', 'hidden');
/* 85  */         setCSSValue(element, 'overflow-x', 'hidden');
/* 86  */         setCSSValue(element, 'overflow-y', 'hidden');
/* 87  */         
/* 88  */         options.useTransform = true;
/* 89  */         options.onBeforeScrollStart = function (e) {
/* 90  */             var target = e.target;
/* 91  */             while (target.nodeType != 1) { target = target.parentNode; }
/* 92  */             
/* 93  */             var tagName = target.tagName;
/* 94  */             if (target.tagName != 'SELECT' && target.tagName != 'INPUT' && target.tagName != 'TEXTAREA') {
/* 95  */                 e.preventDefault();
/* 96  */             }
/* 97  */         };
/* 98  */         
/* 99  */         return new iScroll(element, options);
/* 100 */     }

/* tablet.js */

/* 101 */ }
/* 102 */ 
/* 103 */ function isModernIPhoneBrowser() {
/* 104 */     // iPhones running Safari on iOS 5 or later
/* 105 */     return navigator.userAgent.match(/Safari/) && 
/* 106 */            (navigator.userAgent.match(/iPhone/) || navigator.userAgent.match(/iPad/)) && 
/* 107 */            !navigator.userAgent.match(/OS [234]/);
/* 108 */ }
/* 109 */ 
/* 110 */ function isIOS5Browser() {
/* 111 */     // iPhones running Safari on iOS 5.x
/* 112 */     return navigator.userAgent.match(/Safari/) && 
/* 113 */            (navigator.userAgent.match(/iPhone/) || navigator.userAgent.match(/iPad/)) && 
/* 114 */            navigator.userAgent.match(/OS 5/);
/* 115 */ }
/* 116 */ 
/* 117 */ function isModernAndroidBrowser() {
/* 118 */     // Android default and Chrome browsers on Android 4.x
/* 119 */     return navigator.userAgent.match(/Android 4/);
/* 120 */ }
/* 121 */ 
/* 122 */ // Certain modern browsers support overflow:scroll
/* 123 */ function supportsOverflowScroll() {
/* 124 */     // TODO: Add Androids running modern Chrome/default browser
/* 125 */     return isModernIPhoneBrowser() || isModernAndroidBrowser();
/* 126 */ }
/* 127 */ 
/* 128 */ var moduleProvidesScrollers = false;
/* 129 */ 
/* 130 */ var kgoScrollingElements = [];
/* 131 */ 
/* 132 */ function initHandleScrollingElements() {
/* 133 */     // hacks only needed for iOS when using overflow scroll:
/* 134 */     if (isModernIPhoneBrowser()) {
/* 135 */         window.addEventListener('touchstart', function(event) {
/* 136 */             for (var i = 0; i < kgoScrollingElements.length; i++) {
/* 137 */                 var element = kgoScrollingElements[i];
/* 138 */                 if (element.offsetHeight < element.scrollHeight) {
/* 139 */                     // Trick Safari into bouncing the scroll view, not the whole page:
/* 140 */                     if (element.scrollTop <= 0) {
/* 141 */                         element.scrollTop = 1;
/* 142 */                     }
/* 143 */                     
/* 144 */                     if (element.scrollTop + element.offsetHeight >= element.scrollHeight) {
/* 145 */                         element.scrollTop = element.scrollHeight - element.offsetHeight - 1;
/* 146 */                     }
/* 147 */                 }
/* 148 */             }
/* 149 */         }, false);
/* 150 */         

/* tablet.js */

/* 151 */         // try to stop page bounce
/* 152 */         window.addEventListener('touchmove', function(event) {
/* 153 */             if (document.body) { document.body.scrollTop = 0; }
/* 154 */         }, false);
/* 155 */     }
/* 156 */     
/* 157 */     if (supportsOverflowScroll() && KUROGO_PLATFORM != 'computer') {
/* 158 */         addOnOrientationChangeCallback(function () {
/* 159 */             // hack which forces the navmenu to redraw and reposition so 
/* 160 */             // that it remains scrollable
/* 161 */             var navmenu = document.getElementById('navmenu');
/* 162 */             if (navmenu) {
/* 163 */                 navmenu.style.display = 'none';
/* 164 */                 navmenu.offsetHeight;
/* 165 */                 navmenu.style.display = 'block';
/* 166 */             }
/* 167 */         });
/* 168 */     }
/* 169 */ }
/* 170 */ 
/* 171 */ function addScrollingElement(element) {
/* 172 */     if (typeof element == 'string') {
/* 173 */         element = document.getElementById(element);
/* 174 */     }
/* 175 */     if (element) {
/* 176 */         kgoScrollingElements.push(element);
/* 177 */     }
/* 178 */ }
/* 179 */ 
/* 180 */ function removeScrollingElement(element) {
/* 181 */     if (typeof element == 'string') {
/* 182 */         element = document.getElementById(element);
/* 183 */     }
/* 184 */     if (element) {
/* 185 */         var newKGOScrollingElements = [];
/* 186 */         for (var i = 0; i < kgoScrollingElements.length; i++) {
/* 187 */             if (kgoScrollingElements[i] != element) {
/* 188 */                 newKGOScrollingElements.push(kgoScrollingElements[i]);
/* 189 */             }
/* 190 */         }
/* 191 */         kgoScrollingElements = newKGOScrollingElements;
/* 192 */     }
/* 193 */ }
/* 194 */ 
/* 195 */ function tabletInit() {
/* 196 */     initHandleScrollingElements();
/* 197 */ 
/* 198 */     // Add class to body when browser supports overflow: scroll
/* 199 */     // This allows us to conditionally apply styles which might
/* 200 */     // interfere with iScroll

/* tablet.js */

/* 201 */     if (supportsOverflowScroll()) {
/* 202 */         addClass(document.body, 'kgo-supports-overflow-scroll');
/* 203 */     }
/* 204 */ 
/* 205 */     setOrientation(getOrientation());
/* 206 */     
/* 207 */     // Adjust wrapper height on orientation change or resize
/* 208 */     var resizeHandler = function() { setTimeout(handleWindowResize, 0) };
/* 209 */     if (window.addEventListener) {
/* 210 */       var resizeEvent = 'onorientationchange' in window ? 'orientationchange' : 'resize';
/* 211 */       window.addEventListener(resizeEvent, resizeHandler, false);
/* 212 */     } else if (window.attachEvent) {
/* 213 */       window.attachEvent('onresize', resizeHandler);
/* 214 */     }
/* 215 */     
/* 216 */     
/* 217 */     if (document.getElementById('navmenu')) {
/* 218 */         navScroller = iScrollInit('navmenu', { 
/* 219 */             hScrollbar: false,
/* 220 */             vScrollbar: true,
/* 221 */             bounce: false,
/* 222 */             bounceLock: true
/* 223 */         });
/* 224 */     }
/* 225 */     
/* 226 */     // run module init if present
/* 227 */     // module init can change value of moduleProvidesScrollers to
/* 228 */     // disable container scroller if it provides its own for a splitview
/* 229 */     if (typeof moduleInit != 'undefined') {
/* 230 */         moduleInit();
/* 231 */     }
/* 232 */   
/* 233 */     if (!moduleProvidesScrollers) {
/* 234 */         containerScroller = iScrollInit('container-wrapper', { 
/* 235 */             hScrollbar: false,
/* 236 */             bounce: false,
/* 237 */             bounceLock: true
/* 238 */         });
/* 239 */     }
/* 240 */     
/* 241 */     handleWindowResize();
/* 242 */ }
/* 243 */ 
/* 244 */ function scrollToTop() {
/* 245 */   if (containerScroller) {
/* 246 */   	containerScroller.scrollTo(0,0,0); 
/* 247 */   }
/* 248 */ }
/* 249 */ 
/* 250 */ (function(window) {

/* tablet.js */

/* 251 */ 
/* 252 */     function splitView (options) {
/* 253 */       // set caller options
/* 254 */         if (typeof options == 'object') {
/* 255 */             for (var i in options) {
/* 256 */                 switch (i) {
/* 257 */                     case 'linkSelect':
/* 258 */                     case 'actionForLink':
/* 259 */                         this[i] = options[i];
/* 260 */                         break;
/* 261 */                     default:
/* 262 */                         this.options[i] = options[i];
/* 263 */                         break;
/* 264 */                 }
/* 265 */             }
/* 266 */         }
/* 267 */         
/* 268 */         if (typeof this.options.list == 'string') {
/* 269 */             this.options.list = document.getElementById(this.options.list);
/* 270 */             if (!this.options.list) { return; }
/* 271 */         }
/* 272 */         if (typeof this.options.detail == 'string') {
/* 273 */             this.options.detail = document.getElementById(this.options.detail);
/* 274 */             if (!this.options.detail) { return; }
/* 275 */         }
/* 276 */         if (typeof this.options.content == 'string') {
/* 277 */             this.options.content = document.getElementById(this.options.content);
/* 278 */             if (!this.options.content) { return; }
/* 279 */         }
/* 280 */         
/* 281 */         if (window.addEventListener) {
/* 282 */           window.addEventListener(RESIZE_EVENT, this, false);
/* 283 */         } else if (window.attachEvent) {
/* 284 */           window.attachEvent(RESIZE_EVENT, this);
/* 285 */         }
/* 286 */         
/* 287 */         this.orientation = getOrientation();
/* 288 */         this.list = this.options.list;
/* 289 */         this.detail = this.options.detail;
/* 290 */         this.detailScroller = iScrollInit(this.options.detail, {
/* 291 */             hScrollbar : false,
/* 292 */             hScroll : false
/* 293 */         });
/* 294 */         
/* 295 */         if ('content' in this.options) {
/* 296 */             this.content = this.options.content;
/* 297 */         } else {
/* 298 */             this.options.content = this.options.detail;
/* 299 */             this.content = this.detail;
/* 300 */         }

/* tablet.js */

/* 301 */         
/* 302 */         var self = this;
/* 303 */         
/* 304 */         var links = this.list.getElementsByTagName('a');
/* 305 */ 
/* 306 */         var linkInAnchor = null;
/* 307 */         var anchor = location.hash;
/* 308 */         if (anchor.length > 1) {
/* 309 */             var possibleLinkHref = removeBreadcrumbParameter(decodeURIComponent(anchor.slice(1)));
/* 310 */             if (possibleLinkHref) {
/* 311 */               for (var i=0;i<links.length;i++) {
/* 312 */                   if (possibleLinkHref == removeBreadcrumbParameter(links[i].href)) {
/* 313 */                      linkInAnchor = links[i];
/* 314 */                      break;
/* 315 */                   }
/* 316 */               }
/* 317 */             }
/* 318 */         }
/* 319 */         
/* 320 */         var first = true;
/* 321 */         for (var i=0;i<links.length;i++) {
/* 322 */             links[i].onclick = function(e) {
/* 323 */                 var action = self.actionForLink(this);
/* 324 */                 return self[action](e, this);
/* 325 */             }
/* 326 */ 
/* 327 */             if (!linkInAnchor && first && this.options.selectFirst && this.actionForLink(links[i])=='linkSelect') {
/* 328 */                 links[i].onclick();
/* 329 */                 first = false;
/* 330 */             }
/* 331 */         }
/* 332 */         if (linkInAnchor) {
/* 333 */             linkInAnchor.onclick();
/* 334 */         }
/* 335 */ 
/* 336 */         this.updateListScroller();
/* 337 */     }
/* 338 */ 
/* 339 */     splitView.prototype = {
/* 340 */         orientation: '',
/* 341 */         options: {
/* 342 */             selectFirst: true,
/* 343 */             selectID: null
/* 344 */         },
/* 345 */         baseActionForLink: function(link) {
/* 346 */             if (link.parentNode.className.match(/pagerlink/)) {
/* 347 */                 return 'linkFollow';
/* 348 */             }
/* 349 */             
/* 350 */             return 'linkSelect';

/* tablet.js */

/* 351 */         },
/* 352 */         actionForLink: function(link) {
/* 353 */             return this.baseActionForLink(link);
/* 354 */         },
/* 355 */         linkFollow: function(e, link) {
/* 356 */             //just follow the link
/* 357 */         },
/* 358 */         linkSelect: function(e, link) {
/* 359 */             //ajax fun
/* 360 */             hideShare();
/* 361 */             var self = this;
/* 362 */             var selected = this.list.getElementsByTagName('a');
/* 363 */             for (var j=0;j<selected.length;j++) {
/* 364 */                 removeClass(selected[j],'listSelected');
/* 365 */             }
/* 366 */             addClass(link,'listSelected');
/* 367 */             
/* 368 */             if (this.detailScroller) {
/* 369 */                 this.detailScroller.scrollTo(0,0);
/* 370 */             }
/* 371 */             
/* 372 */             ajaxContentIntoContainer({
/* 373 */                 url: link.href+'&ajax=1', 
/* 374 */                 container: self.content, 
/* 375 */                 timeout: 60, 
/* 376 */                 success: function () {
/* 377 */                     var hash = '#'+encodeURIComponent(removeBreadcrumbParameter(link.href));
/* 378 */                     if (window.history && window.history.pushState && window.history.replaceState && // Regexs from history js plugin
/* 379 */                       !((/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i).test(navigator.userAgent) || // disable for versions of iOS < 4.3 (8F190)
/* 380 */                          (/AppleWebKit\/5([0-2]|3[0-3])/i).test(navigator.userAgent))) { // disable for the mercury iOS browser and older webkit/uiwebview
/* 381 */                         window.history.pushState({}, document.title, hash);
/* 382 */                     } else {
/* 383 */                         location.hash = hash;
/* 384 */                     }
/* 385 */                     
/* 386 */                     if (typeof moduleHandleWindowResize != 'undefined') {
/* 387 */                         moduleHandleWindowResize(e);
/* 388 */                     }
/* 389 */                     
/* 390 */                     var refreshOnLoad = function () {
/* 391 */                         setTimeout(function () {
/* 392 */                             splitviewHandleWindowResize();
/* 393 */                             if (self.detailScroller) {
/* 394 */                                 self.detailScroller.refresh();
/* 395 */                             }
/* 396 */                         }, 100);
/* 397 */                     };
/* 398 */                     
/* 399 */                     // As images load the height of the detail view will change so
/* 400 */                     // refresh the scroller when each image loads:

/* tablet.js */

/* 401 */                     var images = self.content.getElementsByTagName("img");
/* 402 */                     for (var i = 0; i < images.length; i++) {
/* 403 */                         if (images[i].addEventListener) {
/* 404 */                             images[i].addEventListener("load", refreshOnLoad, false);
/* 405 */                         } else if (images[i].attachEvent) {
/* 406 */                             images[i].attachEvent("onload", refreshOnLoad);
/* 407 */                         }
/* 408 */                     }
/* 409 */                     // As iframes load the height of the detail view may change so
/* 410 */                     // refresh the scroller when each iframe loads:
/* 411 */                     var iframes = self.content.getElementsByTagName("iframe");
/* 412 */                     for (var i = 0; i < iframes.length; i++) {
/* 413 */                         if (iframes[i].addEventListener) {
/* 414 */                             iframes[i].addEventListener("load", refreshOnLoad, false);
/* 415 */                         } else if (iframes[i].attachEvent) {
/* 416 */                             iframes[i].attachEvent("onload", refreshOnLoad);
/* 417 */                         }
/* 418 */                     }
/* 419 */                     refreshOnLoad();
/* 420 */                 },
/* 421 */                 error: function (code) {
/* 422 */                 }
/* 423 */             });
/* 424 */             
/* 425 */             e && e.preventDefault();
/* 426 */             return false;
/* 427 */         },
/* 428 */         listScroller: null,
/* 429 */         detailScroller: null,
/* 430 */         handleEvent: function (e) {
/* 431 */             switch (e.type) {
/* 432 */                 case 'orientationchange':
/* 433 */                 case 'resize':
/* 434 */                     // delay updating until after the main resize handlers have run
/* 435 */                     var that = this;
/* 436 */                     setTimeout(function () {
/* 437 */                         if (that.orientation != getOrientation()) {
/* 438 */                             that.orientation = getOrientation();
/* 439 */                             that.updateListScroller();
/* 440 */                             if (typeof moduleHandleWindowResize != 'undefined') {
/* 441 */                                 moduleHandleWindowResize(e);
/* 442 */                             }
/* 443 */                         }
/* 444 */                     }, 0);
/* 445 */                     break;
/* 446 */             }
/* 447 */         },
/* 448 */         updateListScroller: function() {
/* 449 */             var self = this, options={};
/* 450 */             if (this.detail.offsetTop > 0) {

/* tablet.js */

/* 451 */                 options.vScrollbar = false;
/* 452 */                 options.hScrollbar = true;
/* 453 */                 options.vScroll = false;
/* 454 */                 options.hScroll = true;
/* 455 */                 
/* 456 */             } else {
/* 457 */                 options.vScrollbar = true;
/* 458 */                 options.hScrollbar = false;
/* 459 */                 options.hScroll = false;
/* 460 */                 options.vScroll = true;
/* 461 */             }
/* 462 */ 
/* 463 */             if (this.listScroller) {
/* 464 */                 for (var i in options) {
/* 465 */                     this.listScroller.options[i] = options[i];
/* 466 */                 }
/* 467 */                 
/* 468 */                 setTimeout(function() {
/* 469 */                     self.listScroller.refresh();
/* 470 */                     var items = self.list.getElementsByTagName('a');
/* 471 */                     for (var i = 0; i < items.length; i++) {
/* 472 */                         if (hasClass(items[i], 'listSelected')) {
/* 473 */                             self.listScroller.scrollToElement(items[i].parentNode, 0);
/* 474 */                         }
/* 475 */                     }
/* 476 */                 }, 0);
/* 477 */                 return;
/* 478 */             } else {
/* 479 */               this.listScroller = iScrollInit(this.options.list, options);
/* 480 */             }
/* 481 */         },
/* 482 */         refreshScrollers: function () {
/* 483 */             setTimeout(function() {
/* 484 */                 if (self.detailScroller) {
/* 485 */                     self.detailScroller.refresh();
/* 486 */                 }
/* 487 */                 if (self.listScroller) {
/* 488 */                     self.listScroller.refresh();
/* 489 */                 }
/* 490 */             }, 0);
/* 491 */         }
/* 492 */     }
/* 493 */     
/* 494 */     function removeBreadcrumbParameter(url) {
/* 495 */         return url.replace(/[?&]_b=[^&]*/, '');
/* 496 */     }
/* 497 */ 
/* 498 */     var RESIZE_EVENT = window.addEventListener ? 
/* 499 */     ('onorientationchange' in window ? 
/* 500 */     'orientationchange' :  // touch device

/* tablet.js */

/* 501 */     'resize')              // desktop browser
/* 502 */     : ('onresize');          // IE
/* 503 */     
/* 504 */     window.splitView = splitView;
/* 505 */ 
/* 506 */ })(window);
/* 507 */ 
/* 508 */ // sets up css styles to size the container so it is 100% height and width
/* 509 */ function setModuleFillScreen() {
/* 510 */     addClass(document.body, 'fillscreen');
/* 511 */ }
/* 512 */ 
/* 513 */ // Used by news and video modules for news article listings
/* 514 */ function setupSplitViewForListAndDetail(splitview, options) {
/* 515 */     var aSplitView = null;
/* 516 */     
/* 517 */     if (typeof splitview == 'string') {
/* 518 */         splitview = document.getElementById(splitview);
/* 519 */     }
/* 520 */     if (!splitview) { return; } // safety check
/* 521 */     
/* 522 */     var listWrapper = getFirstElementByClassName('splitview-listwrapper', splitview); 
/* 523 */     var list = getFirstElementByClassName('splitview-list', splitview); 
/* 524 */     var detailWrapper = getFirstElementByClassName('splitview-detailwrapper', splitview); 
/* 525 */     var detail = getFirstElementByClassName('splitview-detail', splitview); 
/* 526 */     
/* 527 */     if (!listWrapper || !list || !detailWrapper || !detail) { return; } // safety check
/* 528 */     
/* 529 */     moduleHandleWindowResize = function () {
/* 530 */         var wrapperHeight = document.getElementById('wrapper').offsetHeight;
/* 531 */         var offsetTop = splitview.offsetTop;
/* 532 */         var splitviewHeight = wrapperHeight - offsetTop;
/* 533 */         
/* 534 */         // set the height of the splitview manually because there may be
/* 535 */         // a variable sized header element above it
/* 536 */         splitview.style.height = splitviewHeight + "px";
/* 537 */         
/* 538 */         switch (getOrientation()) {
/* 539 */             case 'landscape':
/* 540 */                 if (hasClass(splitview, 'portrait')) {
/* 541 */                     removeClass(splitview, 'portrait');
/* 542 */                 }
/* 543 */                 list.style['width'] = ''; // default to whatever is in CSS
/* 544 */                 break;
/* 545 */             
/* 546 */             case 'portrait':
/* 547 */                 if (!hasClass(splitview, 'portrait')) {
/* 548 */                     addClass(splitview, 'portrait');
/* 549 */                 }
/* 550 */                 var lists = list.getElementsByTagName('ul');

/* tablet.js */

/* 551 */                 if (lists.length) {
/* 552 */                     // When in portrait mode the list elements are float:left
/* 553 */                     // so the results list does not have a width.  Figure out its
/* 554 */                     // width programmatically so that the browser/iScroll can tell 
/* 555 */                     // if the content is wider than the container.
/* 556 */                     var width = 0;
/* 557 */                     var listItems = listWrapper.getElementsByTagName('li');
/* 558 */                     for (var i = 0; i < listItems.length; i++) {
/* 559 */                         width += listItems[i].offsetWidth;
/* 560 */                     }
/* 561 */                     list.style['width'] = width+'px';
/* 562 */                 }
/* 563 */                 break;
/* 564 */         }
/* 565 */         
/* 566 */         if (aSplitView) {
/* 567 */             aSplitView.refreshScrollers();
/* 568 */         }
/* 569 */     }
/* 570 */     
/* 571 */     moduleProvidesScrollers = true;
/* 572 */     
/* 573 */     setModuleFillScreen();
/* 574 */     moduleHandleWindowResize();
/* 575 */ 
/* 576 */     options = options || {};
/* 577 */     options["list"] = listWrapper;
/* 578 */     options["detail"] = detailWrapper;
/* 579 */     options["content"] = detail;
/* 580 */     
/* 581 */     aSplitView = new splitView(options);
/* 582 */ }
/* 583 */ 
/* 584 */ function splitviewHandleWindowResize() {
/* 585 */     // used by tablet-computer
/* 586 */ }
/* 587 */ 

;
/* tablet-computer.js */

/* 1  */ /*
/* 2  *|  * Copyright Â© 2010 - 2013 Modo Labs Inc. All rights reserved.
/* 3  *|  *
/* 4  *|  * The license governing the contents of this file is located in the LICENSE
/* 5  *|  * file located at the root directory of this distribution. If the LICENSE file
/* 6  *|  * is missing, please contact sales@modolabs.com.
/* 7  *|  *
/* 8  *|  */
/* 9  */ 
/* 10 */ function supportsOverflowScroll() {
/* 11 */     // all desktops support overflow:scroll
/* 12 */     return true;
/* 13 */ }
/* 14 */ 
/* 15 */ function setupSplitViewForListAndDetail(splitview, options) {
/* 16 */     var aSplitView = null;
/* 17 */     
/* 18 */     if (typeof splitview == 'string') {
/* 19 */         splitview = document.getElementById(splitview);
/* 20 */     }
/* 21 */     if (!splitview) { return; } // safety check
/* 22 */     
/* 23 */     var listWrapper = getFirstElementByClassName('splitview-listwrapper', splitview);
/* 24 */     var detailWrapper = getFirstElementByClassName('splitview-detailwrapper', splitview);
/* 25 */     var detail = getFirstElementByClassName('splitview-detail', splitview);
/* 26 */     if (!listWrapper || !detailWrapper || !detail) { return; } // safety check
/* 27 */     
/* 28 */     // manually size panes
/* 29 */     moduleHandleWindowResize = splitviewHandleWindowResize;
/* 30 */     moduleHandleWindowResize();
/* 31 */ 
/* 32 */     options = options || {};
/* 33 */     options["list"] = listWrapper;
/* 34 */     options["detail"] = detailWrapper;
/* 35 */     options["content"] = detail;
/* 36 */     
/* 37 */     aSplitView = new splitView(options);
/* 38 */ 
/* 39 */ }
/* 40 */ 
/* 41 */ function splitviewHandleWindowResize() {
/* 42 */     var wrapper = document.getElementById('wrapper');
/* 43 */     
/* 44 */     var singleSplitviewHandleWindowResize = function(splitview) {
/* 45 */         var listWrapper = getFirstElementByClassName('splitview-listwrapper', splitview);
/* 46 */         var list = getFirstElementByClassName('splitview-list', splitview);
/* 47 */         var detailWrapper = getFirstElementByClassName('splitview-detailwrapper', splitview);
/* 48 */         var detail = getFirstElementByClassName('splitview-detail', splitview);
/* 49 */         if (!wrapper || !listWrapper || !list || !detailWrapper || !detail) { return; } // safety check
/* 50 */         

/* tablet-computer.js */

/* 51 */         var wrapperHeight = wrapper.offsetHeight - splitview.offsetTop;
/* 52 */         var listHeight = list.offsetHeight;
/* 53 */         var detailHeight = detail.offsetHeight;
/* 54 */         var height = Math.max(wrapperHeight, listHeight, detailHeight);
/* 55 */         
/* 56 */         var splitviewForceOffsetHeight = function(element, offsetHeight) {
/* 57 */             var cssHeight = getCSSHeight(element) - element.offsetHeight + offsetHeight;
/* 58 */             setCSSValue(element, 'height', cssHeight+"px");
/* 59 */         };
/* 60 */         splitviewForceOffsetHeight(splitview, height);
/* 61 */         splitviewForceOffsetHeight(listWrapper, height);
/* 62 */         splitviewForceOffsetHeight(detailWrapper, height);
/* 63 */     }
/* 64 */     
/* 65 */     var splitviews = getElementsByClassName('splitview');
/* 66 */     for (var i = 0; i < splitviews.length; i++) {
/* 67 */         singleSplitviewHandleWindowResize(splitviews[i]);
/* 68 */     }
/* 69 */ }
/* 70 */ 

;
/* common.js */

/* 1  */ /*
/* 2  *|  * Copyright Â© 2010 - 2013 Modo Labs Inc. All rights reserved.
/* 3  *|  *
/* 4  *|  * The license governing the contents of this file is located in the LICENSE
/* 5  *|  * file located at the root directory of this distribution. If the LICENSE file
/* 6  *|  * is missing, please contact sales@modolabs.com.
/* 7  *|  *
/* 8  *|  */
/* 9  */ 
/* 10 */ function runFederatedSearch(federatedSearchModules) {
/* 11 */     var federatedSearchEllipsizer = new ellipsizer();
/* 12 */ 
/* 13 */     for (var i = 0; i < federatedSearchModules.length; i++) {
/* 14 */         var elem = document.getElementById(federatedSearchModules[i]['elementId']);
/* 15 */         if (elem) {
/* 16 */             (function (elem) {
/* 17 */                 ajaxContentIntoContainer({
/* 18 */                     url: federatedSearchModules[i]['ajaxURL'], 
/* 19 */                     container: elem, 
/* 20 */                     timeout: 60,
/* 21 */                     success: function () {
/* 22 */                         console.log(elem.id);
/* 23 */                         setTimeout(function () {
/* 24 */                             var items = getElementsByClassName('ellipsis', elem);
/* 25 */                             for (var j = 0; j < items.length; j++) {
/* 26 */                                 federatedSearchEllipsizer.addElement(items[j]);
/* 27 */                             }
/* 28 */                         }, 0);
/* 29 */                     }
/* 30 */                 });
/* 31 */             })(elem);
/* 32 */         }
/* 33 */     }
/* 34 */ }
/* 35 */ 

;
/* index-tablet.js */

/* 1   */ /*
/* 2   *|  * Copyright Â© 2010 - 2013 Modo Labs Inc. All rights reserved.
/* 3   *|  *
/* 4   *|  * The license governing the contents of this file is located in the LICENSE
/* 5   *|  * file located at the root directory of this distribution. If the LICENSE file
/* 6   *|  * is missing, please contact sales@modolabs.com.
/* 7   *|  *
/* 8   *|  */
/* 9   */ 
/* 10  */ function loadModulePages(modulePanes) {
/* 11  */     function loadModulePage(info) {
/* 12  */         var elem = document.getElementById(info['elementId']);
/* 13  */         if (!elem) { return; }
/* 14  */         
/* 15  */         ajaxContentIntoContainer({
/* 16  */             url: info['ajaxURL'], 
/* 17  */             container: elem, 
/* 18  */             timeout: 60, 
/* 19  */             loadMessage: false,
/* 20  */             success: function () {
/* 21  */                 removeClass(elem, 'loading');
/* 22  */                 onDOMChange();
/* 23  */                 moduleHandleWindowResize();
/* 24  */             },
/* 25  */             error: function (code) {
/* 26  */                 removeClass(elem, 'loading');
/* 27  */             }
/* 28  */         });
/* 29  */     }
/* 30  */     
/* 31  */     for (var i = 0; i < modulePanes.length; i++) {
/* 32  */         loadModulePage(modulePanes[i]);
/* 33  */     }
/* 34  */ }
/* 35  */ 
/* 36  */ var paneResizeHandlers = [];
/* 37  */ function registerPaneResizeHandler(handler) {
/* 38  */     paneResizeHandlers.push(typeof handler == 'string' ? window[handler] : handler);
/* 39  */ }
/* 40  */ 
/* 41  */ function callPaneResizeHandlers() {
/* 42  */     for (var i = 0; i < paneResizeHandlers.length; i++) {
/* 43  */         paneResizeHandlers[i]();
/* 44  */     }
/* 45  */ }
/* 46  */ 
/* 47  */ // figure out where an element is relative to its enclosing portlet
/* 48  */ function getPortletOffsetTop(elem) {
/* 49  */     var offsetTop = 0;
/* 50  */     if (elem && elem.offsetParent) {

/* index-tablet.js */

/* 51  */         while (!hasClass(elem, 'portlet-content') && elem.offsetParent) {
/* 52  */             offsetTop += elem.offsetTop;
/* 53  */             elem = elem.offsetParent;
/* 54  */         }
/* 55  */         if (!hasClass(elem, 'portlet-content')) {
/* 56  */             offsetTop = 0;  // error!
/* 57  */         }
/* 58  */     }
/* 59  */     return offsetTop;
/* 60  */ }
/* 61  */ 
/* 62  */ function moduleHandleWindowResize() {
/* 63  */     callPaneResizeHandlers();
/* 64  */     
/* 65  */     var portlets = getElementsByClassName('portlet-content');
/* 66  */     if (portlets && portlets.length) {
/* 67  */         for (var i = 0; i < portlets.length; i++) {
/* 68  */             var portlet = portlets[i];
/* 69  */             var clipHeight = getCSSHeight(portlet);
/* 70  */             
/* 71  */             if (hasClass(portlet, 'portlet-no-truncate')) {
/* 72  */                 continue;  // module handling this
/* 73  */             }
/* 74  */             
/* 75  */             var lists = portlet.getElementsByTagName('ul');
/* 76  */             if (!lists || !lists.length) {
/* 77  */                 continue; // no lists
/* 78  */             }
/* 79  */             
/* 80  */             var done = false;
/* 81  */             for (var j = lists.length - 1; j >= 0; j--) {
/* 82  */                 var list = lists[j];
/* 83  */                 
/* 84  */                 var items = list.getElementsByTagName('li');
/* 85  */                 
/* 86  */                 // make all list items visible
/* 87  */                 for (var k = 0; k < items.length; k++) {
/* 88  */                     items[k].style.display = 'list-item';
/* 89  */                 }
/* 90  */                 
/* 91  */                 // hide items that are clipped by the portlet
/* 92  */                 for (var k = items.length - 1; k >= 0; k--) {
/* 93  */                     var item = items[k];
/* 94  */                     
/* 95  */                     var bottomOffset = getPortletOffsetTop(item) + item.offsetHeight;
/* 96  */                     if (bottomOffset > clipHeight) {
/* 97  */                         item.style.display = 'none';
/* 98  */                     } else {
/* 99  */                         done = true; // to break us out of the next loop up
/* 100 */                         break;

/* index-tablet.js */

/* 101 */                     }
/* 102 */                 }
/* 103 */                 
/* 104 */                 if (done) {
/* 105 */                     break;
/* 106 */                 }
/* 107 */             }
/* 108 */         }
/* 109 */     }
/* 110 */ }
/* 111 */ 
